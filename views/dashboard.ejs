<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body class="bg-gray-100">
    <div class="min-h-screen">
        <!-- Navigation -->
        <nav class="bg-white shadow-lg">
            <div class="max-w-7xl mx-auto px-4">
                <div class="flex justify-between h-16">
                    <div class="flex items-center">
                        <h1 class="text-xl font-bold text-gray-800">Admin Dashboard</h1>
                    </div>
                    <div class="flex items-center">
                        <button onclick="logout()" class="ml-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                            <i class="fas fa-sign-out-alt mr-2"></i>Logout
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
            <!-- Stats -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-blue-500 bg-opacity-10">
                            <i class="fas fa-envelope text-blue-500 text-2xl"></i>
                        </div>
                        <div class="ml-4">
                            <h2 class="text-gray-600 text-sm">Total Messages</h2>
                            <p class="text-2xl font-semibold text-gray-800" id="totalMessages">0</p>
                        </div>
                    </div>
                </div>
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-green-500 bg-opacity-10">
                            <i class="fas fa-check text-green-500 text-2xl"></i>
                        </div>
                        <div class="ml-4">
                            <h2 class="text-gray-600 text-sm">Responded</h2>
                            <p class="text-2xl font-semibold text-gray-800" id="respondedMessages">0</p>
                        </div>
                    </div>
                </div>
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-yellow-500 bg-opacity-10">
                            <i class="fas fa-clock text-yellow-500 text-2xl"></i>
                        </div>
                        <div class="ml-4">
                            <h2 class="text-gray-600 text-sm">Pending</h2>
                            <p class="text-2xl font-semibold text-gray-800" id="pendingMessages">0</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Messages Table -->
            <div class="bg-white shadow rounded-lg">
                <div class="px-4 py-5 sm:px-6">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Contact Messages</h3>
                </div>
                <div class="border-t border-gray-200">
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200" id="messagesTable">
                                <!-- Messages will be inserted here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Response Modal -->
    <div id="responseModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900">Respond to Message</h3>
                <div class="mt-2 px-7 py-3">
                    <textarea id="responseText" class="w-full px-3 py-2 border rounded-md" rows="4" placeholder="Type your response..."></textarea>
                </div>
                <div class="flex justify-end mt-4">
                    <button onclick="closeModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md mr-2">Cancel</button>
                    <button onclick="sendResponse()" class="px-4 py-2 bg-blue-500 text-white rounded-md">Send Response</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentContactId = null;
        let contacts = [];

        // Check authentication on page load
        checkAuth();

        async function checkAuth() {
            try {
                const response = await fetch('/api/admin/check-auth');
                if (!response.ok) {
                    window.location.href = '/adminlogin';
                } else {
                    loadContacts();
                }
            } catch (error) {
                window.location.href = '/adminlogin';
            }
        }

        async function loadContacts() {
            try {
                const response = await fetch('/api/admin/contacts');
                const data = await response.json();
                
                if (data.success) {
                    contacts = data.contacts;
                    updateStats();
                    renderContacts();
                }
            } catch (error) {
                console.error('Error loading contacts:', error);
            }
        }

        function updateStats() {
            const total = contacts.length;
            const responded = contacts.filter(c => c.status === 'responded').length;
            const pending = contacts.filter(c => c.status === 'new').length;

            document.getElementById('totalMessages').textContent = total;
            document.getElementById('respondedMessages').textContent = responded;
            document.getElementById('pendingMessages').textContent = pending;
        }

        function renderContacts() {
            const tbody = document.getElementById('messagesTable');
            tbody.innerHTML = '';

            contacts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)).forEach(contact => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">${contact.name}</td>
                    <td class="px-6 py-4 whitespace-nowrap">${contact.email}</td>
                    <td class="px-6 py-4">${contact.message}</td>
                    <td class="px-6 py-4 whitespace-nowrap">${new Date(contact.timestamp).toLocaleDateString()}</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                            ${contact.status === 'new' ? 'bg-yellow-100 text-yellow-800' : 
                            contact.status === 'responded' ? 'bg-green-100 text-green-800' : 
                            'bg-gray-100 text-gray-800'}">
                            ${contact.status}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        ${contact.status === 'new' ? `
                            <button onclick="openResponseModal('${contact.id}')" 
                                class="text-blue-600 hover:text-blue-900 mr-3">
                                <i class="fas fa-reply"></i> Respond
                            </button>
                        ` : ''}
                        <button onclick="toggleStatus('${contact.id}')" 
                            class="text-gray-600 hover:text-gray-900">
                            <i class="fas fa-sync"></i> Toggle Status
                        </button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        }

        function openResponseModal(contactId) {
            currentContactId = contactId;
            document.getElementById('responseModal').classList.remove('hidden');
            document.getElementById('responseText').value = '';
        }

        function closeModal() {
            document.getElementById('responseModal').classList.add('hidden');
            currentContactId = null;
        }

        async function sendResponse() {
            if (!currentContactId) return;

            const response = document.getElementById('responseText').value;
            if (!response.trim()) {
                alert('Please enter a response');
                return;
            }

            try {
                const result = await fetch(`/api/admin/contacts/${currentContactId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        status: 'responded',
                        response
                    })
                });

                if (result.ok) {
                    closeModal();
                    loadContacts();
                }
            } catch (error) {
                console.error('Error sending response:', error);
            }
        }

        async function toggleStatus(contactId) {
            try {
                const contact = contacts.find(c => c.id === contactId);
                const newStatus = contact.status === 'new' ? 'responded' : 'new';
                
                const result = await fetch(`/api/admin/contacts/${contactId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        status: newStatus
                    })
                });

                if (result.ok) {
                    loadContacts();
                }
            } catch (error) {
                console.error('Error toggling status:', error);
            }
        }

        async function logout() {
            try {
                await fetch('/api/admin/logout', { method: 'POST' });
                window.location.href = '/adminlogin';
            } catch (error) {
                console.error('Logout failed:', error);
            }
        }
    </script>
</body>
</html> 