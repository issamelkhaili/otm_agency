<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTM Education - Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .message-content {
            max-height: 150px;
            overflow-y: auto;
        }
        .message-preview {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        .modal {
            transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
        }
        .status-new {
            background-color: rgba(251, 191, 36, 0.1);
            color: rgb(251, 191, 36);
        }
        .status-responded {
            background-color: rgba(16, 185, 129, 0.1);
            color: rgb(16, 185, 129);
        }
        .status-archived {
            background-color: rgba(107, 114, 128, 0.1);
            color: rgb(107, 114, 128);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <!-- Navigation -->
    <nav class="bg-blue-800 text-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <span class="text-xl font-bold">OTM Education Admin</span>
                </div>
                <div class="flex items-center">
                    <span id="admin-username" class="mr-4">Admin</span>
                    <button id="logout-button" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
                        <i class="fas fa-sign-out-alt mr-2"></i>Logout
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <!-- Stats -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-blue-500 bg-opacity-10">
                        <i class="fas fa-envelope text-blue-500 text-2xl"></i>
                    </div>
                    <div class="ml-4">
                        <h2 class="text-gray-600 text-sm">Total Messages</h2>
                        <p class="text-2xl font-semibold text-gray-800" id="total-messages">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-yellow-500 bg-opacity-10">
                        <i class="fas fa-clock text-yellow-500 text-2xl"></i>
                    </div>
                    <div class="ml-4">
                        <h2 class="text-gray-600 text-sm">New</h2>
                        <p class="text-2xl font-semibold text-gray-800" id="new-messages">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-green-500 bg-opacity-10">
                        <i class="fas fa-check text-green-500 text-2xl"></i>
                    </div>
                    <div class="ml-4">
                        <h2 class="text-gray-600 text-sm">Responded</h2>
                        <p class="text-2xl font-semibold text-gray-800" id="responded-messages">0</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex flex-col justify-center">
                    <button id="refresh-button" class="flex items-center justify-center px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors mb-2">
                        <i class="fas fa-sync-alt mr-2"></i>Refresh Data
                    </button>
                    <button id="fetch-emails-button" class="flex items-center justify-center px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors">
                        <i class="fas fa-envelope mr-2"></i>Check Emails
                    </button>
                </div>
            </div>
        </div>

        <!-- Messages Table -->
        <div class="bg-white shadow rounded-lg overflow-hidden">
            <div class="px-4 py-5 border-b border-gray-200 flex justify-between items-center">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Contact Messages</h3>
                <div class="flex space-x-2">
                    <select id="status-filter" class="form-select rounded-md border-gray-300 shadow-sm">
                        <option value="all">All Status</option>
                        <option value="new">New</option>
                        <option value="responded">Responded</option>
                        <option value="archived">Archived</option>
                    </select>
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200" id="messages-table">
                        <tr>
                            <td colspan="6" class="px-6 py-4 text-center text-gray-500">Loading messages...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div id="no-messages" class="p-6 text-center text-gray-500 hidden">No messages found.</div>
        </div>
    </main>

    <!-- Response Modal -->
    <div id="response-modal" class="modal fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 overflow-hidden">
            <div class="px-6 py-4 bg-blue-800 text-white flex justify-between items-center">
                <h3 class="text-lg font-medium">Respond to Message</h3>
                <button id="close-modal" class="text-white hover:text-gray-200">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-6">
                <div class="mb-4 border-b pb-4">
                    <h4 class="font-medium text-gray-800 mb-2">Original Message:</h4>
                    <div class="bg-gray-100 p-3 rounded">
                        <p class="text-sm text-gray-600">From: <span id="modal-name" class="font-medium">John Doe</span> &lt;<span id="modal-email">john@example.com</span>&gt;</p>
                        <p class="text-sm text-gray-600">Date: <span id="modal-date">January 1, 2025</span></p>
                        <div class="mt-2 text-gray-800" id="modal-message">Loading message content...</div>
                    </div>
                </div>
                <div id="previous-responses" class="mb-4 hidden">
                    <h4 class="font-medium text-gray-800 mb-2">Previous Responses:</h4>
                    <div id="responses-container" class="space-y-3">
                        <!-- Responses will be added here -->
                    </div>
                </div>
                <div>
                    <label for="response-text" class="block text-sm font-medium text-gray-700 mb-2">Your Response:</label>
                    <textarea id="response-text" rows="5" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="Type your response here..."></textarea>
                </div>
            </div>
            <div class="px-6 py-4 bg-gray-50 flex justify-end">
                <button id="cancel-response" class="px-4 py-2 bg-gray-300 text-gray-700 rounded mr-2 hover:bg-gray-400 transition-colors">Cancel</button>
                <button id="send-response" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Send Response</button>
            </div>
        </div>
    </div>

    <!-- View Message Modal -->
    <div id="view-modal" class="modal fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 overflow-hidden">
            <div class="px-6 py-4 bg-blue-800 text-white flex justify-between items-center">
                <h3 class="text-lg font-medium">Message Details</h3>
                <button id="close-view-modal" class="text-white hover:text-gray-200">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-6">
                <div class="mb-4">
                    <h4 class="font-medium text-gray-800 mb-2">Contact Information:</h4>
                    <div class="bg-gray-100 p-3 rounded">
                        <p class="text-gray-600">Name: <span id="view-name" class="font-medium">John Doe</span></p>
                        <p class="text-gray-600">Email: <span id="view-email">john@example.com</span></p>
                        <p class="text-gray-600">Date: <span id="view-date">January 1, 2025</span></p>
                        <p class="text-gray-600">Status: <span id="view-status" class="px-2 py-1 rounded text-xs font-medium">New</span></p>
                    </div>
                </div>
                <div class="mb-4">
                    <h4 class="font-medium text-gray-800 mb-2">Message:</h4>
                    <div class="bg-gray-100 p-3 rounded max-h-40 overflow-y-auto">
                        <p id="view-message" class="text-gray-800">Loading message content...</p>
                    </div>
                </div>
                <div id="view-responses" class="mb-4 hidden">
                    <h4 class="font-medium text-gray-800 mb-2">Responses:</h4>
                    <div id="view-responses-container" class="space-y-3">
                        <!-- Responses will be added here -->
                    </div>
                </div>
            </div>
            <div class="px-6 py-4 bg-gray-50 flex justify-end">
                <button id="view-close" class="px-4 py-2 bg-gray-300 text-gray-700 rounded mr-2 hover:bg-gray-400 transition-colors">Close</button>
                <button id="view-respond" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Respond</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let contacts = [];
        let currentContactId = null;
        const API_BASE_URL = '/api/admin';

        // Check authentication on page load
        document.addEventListener('DOMContentLoaded', checkAuth);

        // Event listeners
        document.getElementById('logout-button').addEventListener('click', logout);
        document.getElementById('refresh-button').addEventListener('click', loadContacts);
        document.getElementById('fetch-emails-button').addEventListener('click', fetchEmails);
        document.getElementById('close-modal').addEventListener('click', closeResponseModal);
        document.getElementById('cancel-response').addEventListener('click', closeResponseModal);
        document.getElementById('send-response').addEventListener('click', sendResponse);
        document.getElementById('close-view-modal').addEventListener('click', closeViewModal);
        document.getElementById('view-close').addEventListener('click', closeViewModal);
        document.getElementById('view-respond').addEventListener('click', respondFromViewModal);
        document.getElementById('status-filter').addEventListener('change', filterContacts);

        // Authentication check
        async function checkAuth() {
            try {
                const response = await fetch(`${API_BASE_URL}/check-auth`, {
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    window.location.href = '/adminlogin';
                    return;
                }
                
                const data = await response.json();
                if (data.user && data.user.username) {
                    document.getElementById('admin-username').textContent = data.user.username;
                }
                
                // Load contacts after authentication is confirmed
                loadContacts();
            } catch (error) {
                console.error('Authentication check failed:', error);
                window.location.href = '/adminlogin';
            }
        }

        // Get token from localStorage
        function getToken() {
            return localStorage.getItem('adminToken');
        }

        // Load all contacts
        async function loadContacts() {
            try {
                const response = await fetch(`${API_BASE_URL}/contacts`, {
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    if (response.status === 401 || response.status === 403) {
                        window.location.href = '/adminlogin';
                        return;
                    }
                    throw new Error('Failed to load contacts');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to load contacts');
                }
                
                contacts = data.contacts || [];
                updateStats();
                renderContacts();
            } catch (error) {
                console.error('Error loading contacts:', error);
                showToast('Error loading contacts', 'error');
            }
        }

        // Update statistics
        function updateStats() {
            const total = contacts.length;
            const newCount = contacts.filter(c => c.status === 'new').length;
            const respondedCount = contacts.filter(c => c.status === 'responded').length;
            
            document.getElementById('total-messages').textContent = total;
            document.getElementById('new-messages').textContent = newCount;
            document.getElementById('responded-messages').textContent = respondedCount;
        }

        // Render contacts table
        function renderContacts() {
            const tbody = document.getElementById('messages-table');
            const noMessages = document.getElementById('no-messages');
            
            // Get filter value
            const filter = document.getElementById('status-filter').value;
            
            // Filter contacts if needed
            const filteredContacts = filter === 'all' 
                ? contacts 
                : contacts.filter(c => c.status === filter);
            
            if (filteredContacts.length === 0) {
                tbody.innerHTML = '';
                noMessages.classList.remove('hidden');
                return;
            }
            
            noMessages.classList.add('hidden');
            tbody.innerHTML = '';
            
            // Sort contacts by date (newest first)
            filteredContacts
                .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
                .forEach(contact => {
                    const tr = document.createElement('tr');
                    tr.className = contact.status === 'new' ? 'bg-yellow-50' : '';
                    
                    const date = new Date(contact.createdAt);
                    const formattedDate = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
                    
                    // Truncate message for preview
                    const messagePreview = contact.message.length > 100 
                        ? contact.message.substring(0, 100) + '...' 
                        : contact.message;
                    
                    // Determine status class
                    let statusClass = 'status-new';
                    if (contact.status === 'responded') {
                        statusClass = 'status-responded';
                    } else if (contact.status === 'archived') {
                        statusClass = 'status-archived';
                    }
                    
                    tr.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="font-medium text-gray-900">${contact.name}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-gray-500">${contact.email}</div>
                        </td>
                        <td class="px-6 py-4">
                            <div class="text-gray-500 message-preview">${messagePreview}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            ${formattedDate}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}">
                                ${contact.status}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <button data-id="${contact.id}" class="view-button text-blue-600 hover:text-blue-900 mr-2">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button data-id="${contact.id}" class="respond-button text-green-600 hover:text-green-900 mr-2 ${contact.status === 'new' ? '' : 'opacity-50'}">
                                <i class="fas fa-reply"></i>
                            </button>
                            <button data-id="${contact.id}" data-status="${contact.status}" class="toggle-status-button text-gray-600 hover:text-gray-900">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </td>
                    `;
                    
                    tbody.appendChild(tr);
                });
            
            // Add event listeners to buttons
            document.querySelectorAll('.view-button').forEach(button => {
                button.addEventListener('click', () => viewContact(button.dataset.id));
            });
            
            document.querySelectorAll('.respond-button').forEach(button => {
                button.addEventListener('click', () => openResponseModal(button.dataset.id));
            });
            
            document.querySelectorAll('.toggle-status-button').forEach(button => {
                button.addEventListener('click', () => toggleStatus(button.dataset.id, button.dataset.status));
            });
        }

        // Filter contacts
        function filterContacts() {
            renderContacts();
        }

        // View contact details
        function viewContact(contactId) {
            const contact = contacts.find(c => c.id === contactId);
            if (!contact) return;
            
            // Fill in contact details
            document.getElementById('view-name').textContent = contact.name;
            document.getElementById('view-email').textContent = contact.email;
            
            const date = new Date(contact.createdAt);
            document.getElementById('view-date').textContent = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
            
            const statusElement = document.getElementById('view-status');
            statusElement.textContent = contact.status;
            
            // Update status class
            statusElement.className = 'px-2 py-1 rounded text-xs font-medium';
            if (contact.status === 'new') {
                statusElement.classList.add('status-new');
            } else if (contact.status === 'responded') {
                statusElement.classList.add('status-responded');
            } else {
                statusElement.classList.add('status-archived');
            }
            
            document.getElementById('view-message').textContent = contact.message;
            
            // Handle responses
            const responsesContainer = document.getElementById('view-responses-container');
            responsesContainer.innerHTML = '';
            
            if (contact.responses && contact.responses.length > 0) {
                document.getElementById('view-responses').classList.remove('hidden');
                
                contact.responses.forEach(response => {
                    const responseDate = new Date(response.timestamp);
                    const formattedResponseDate = responseDate.toLocaleDateString() + ' ' + responseDate.toLocaleTimeString();
                    
                    const responseDiv = document.createElement('div');
                    responseDiv.className = 'bg-blue-50 p-3 rounded';
                    responseDiv.innerHTML = `
                        <p class="text-sm text-gray-600">From: <span class="font-medium">${response.from}</span></p>
                        <p class="text-sm text-gray-600">Date: ${formattedResponseDate}</p>
                        <div class="mt-2 text-gray-800">${response.content}</div>
                    `;
                    
                    responsesContainer.appendChild(responseDiv);
                });
            } else {
                document.getElementById('view-responses').classList.add('hidden');
            }
            
            // Store current contact ID for respond button
            currentContactId = contactId;
            
            // Show the modal
            document.getElementById('view-modal').classList.remove('hidden');
        }

        // Open response modal
        function openResponseModal(contactId) {
            const contact = contacts.find(c => c.id === contactId);
            if (!contact) return;
            
            // Fill in contact details
            document.getElementById('modal-name').textContent = contact.name;
            document.getElementById('modal-email').textContent = contact.email;
            
            const date = new Date(contact.createdAt);
            document.getElementById('modal-date').textContent = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
            
            document.getElementById('modal-message').textContent = contact.message;
            
            // Handle previous responses
            const responsesContainer = document.getElementById('responses-container');
            responsesContainer.innerHTML = '';
            
            if (contact.responses && contact.responses.length > 0) {
                document.getElementById('previous-responses').classList.remove('hidden');
                
                contact.responses.forEach(response => {
                    const responseDate = new Date(response.timestamp);
                    const formattedResponseDate = responseDate.toLocaleDateString() + ' ' + responseDate.toLocaleTimeString();
                    
                    const responseDiv = document.createElement('div');
                    responseDiv.className = 'bg-blue-50 p-3 rounded';
                    responseDiv.innerHTML = `
                        <p class="text-sm text-gray-600">From: <span class="font-medium">${response.from}</span></p>
                        <p class="text-sm text-gray-600">Date: ${formattedResponseDate}</p>
                        <div class="mt-2 text-gray-800">${response.content}</div>
                    `;
                    
                    responsesContainer.appendChild(responseDiv);
                });
            } else {
                document.getElementById('previous-responses').classList.add('hidden');
            }
            
            // Clear response text
            document.getElementById('response-text').value = '';
            
            // Store current contact ID
            currentContactId = contactId;
            
            // Show the modal
            document.getElementById('response-modal').classList.remove('hidden');
            
            // Focus on response textarea
            setTimeout(() => {
                document.getElementById('response-text').focus();
            }, 100);
        }

        // Close response modal
        function closeResponseModal() {
            document.getElementById('response-modal').classList.add('hidden');
            currentContactId = null;
        }

        // Close view modal
        function closeViewModal() {
            document.getElementById('view-modal').classList.add('hidden');
            currentContactId = null;
        }

        // Open response modal from view modal
        function respondFromViewModal() {
            closeViewModal();
            openResponseModal(currentContactId);
        }

        // Send response
        async function sendResponse() {
            if (!currentContactId) return;
            
            const responseText = document.getElementById('response-text').value.trim();
            if (!responseText) {
                alert('Please enter a response');
                return;
            }
            
            try {
                const response = await fetch(`${API_BASE_URL}/contacts/${currentContactId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getToken()}`
                    },
                    body: JSON.stringify({
                        status: 'responded',
                        response: responseText
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to send response');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to send response');
                }
                
                closeResponseModal();
                loadContacts();
                showToast('Response sent successfully', 'success');
            } catch (error) {
                console.error('Error sending response:', error);
                showToast('Error sending response', 'error');
            }
        }

        // Toggle contact status
        async function toggleStatus(contactId, currentStatus) {
            const newStatus = currentStatus === 'new' ? 'responded' : 
                              currentStatus === 'responded' ? 'archived' : 'new';
            
            try {
                const response = await fetch(`${API_BASE_URL}/contacts/${contactId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getToken()}`
                    },
                    body: JSON.stringify({
                        status: newStatus
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to update status');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to update status');
                }
                
                loadContacts();
                showToast(`Status updated to ${newStatus}`, 'success');
            } catch (error) {
                console.error('Error updating status:', error);
                showToast('Error updating status', 'error');
            }
        }

        // Fetch emails
        async function fetchEmails() {
            try {
                const button = document.getElementById('fetch-emails-button');
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Checking...';
                
                const response = await fetch(`${API_BASE_URL}/fetch-emails`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch emails');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to fetch emails');
                }
                
                showToast('Email check initiated', 'success');
                
                // Reload contacts after a delay to allow for email processing
                setTimeout(loadContacts, 2000);
            } catch (error) {
                console.error('Error fetching emails:', error);
                showToast('Error checking emails', 'error');
            } finally {
                const button = document.getElementById('fetch-emails-button');
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-envelope mr-2"></i>Check Emails';
            }
        }

        // Logout
        async function logout() {
            try {
                await fetch(`${API_BASE_URL}/logout`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                // Clear token and redirect
                localStorage.removeItem('adminToken');
                window.location.href = '/adminlogin';
            } catch (error) {
                console.error('Logout failed:', error);
                // Still redirect even if API call fails
                localStorage.removeItem('adminToken');
                window.location.href = '/adminlogin';
            }
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            // Create toast element if it doesn't exist
            let toast = document.getElementById('toast');
            if (!toast) {
                toast = document.createElement('div');
                toast.id = 'toast';
                toast.className = 'fixed bottom-4 right-4 px-4 py-2 rounded shadow-lg z-50 transition-all duration-300 opacity-0 transform translate-y-2';
                document.body.appendChild(toast);
            }
            
            // Set toast type
            toast.className = 'fixed bottom-4 right-4 px-4 py-2 rounded shadow-lg z-50 transition-all duration-300 opacity-0 transform translate-y-2';
            
            if (type === 'success') {
                toast.classList.add('bg-green-500', 'text-white');
            } else if (type === 'error') {
                toast.classList.add('bg-red-500', 'text-white');
            } else {
                toast.classList.add('bg-blue-500', 'text-white');
            }
            
            // Set message
            toast.textContent = message;
            
            // Show toast
            setTimeout(() => {
                toast.classList.remove('opacity-0', 'translate-y-2');
                toast.classList.add('opacity-100', 'translate-y-0');
            }, 10);
            
            // Hide toast after 3 seconds
            setTimeout(() => {
                toast.classList.remove('opacity-100', 'translate-y-0');
                toast.classList.add('opacity-0', 'translate-y-2');
            }, 3000);
        }
    </script>
</body>
</html>