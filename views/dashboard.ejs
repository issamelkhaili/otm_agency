<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTM Education - Admin Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
            background-color: #f7f9fc;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        
        /* Dark Mode Styles */
        body.dark-mode {
            background-color: #121212;
            color: #e0e0e0;
        }
        
        body.dark-mode .bg-white {
            background-color: #1e1e1e !important;
        }
        
        body.dark-mode .bg-blue-800 {
            background-color: #0c2d4d !important;
        }
        
        body.dark-mode .bg-gray-50 {
            background-color: #121212 !important;
        }
        
        body.dark-mode .bg-gray-100 {
            background-color: #1a1a1a !important;
        }
        
        body.dark-mode .text-gray-500 {
            color: #a0a0a0 !important;
        }
        
        body.dark-mode .text-gray-600, 
        body.dark-mode .text-gray-700,
        body.dark-mode .text-gray-800,
        body.dark-mode .text-gray-900 {
            color: #e0e0e0 !important;
        }
        
        body.dark-mode .border-gray-200 {
            border-color: #333 !important;
        }
        
        body.dark-mode .message-bubble-user {
            background-color: #2a2a2a;
            border-left: 3px solid #10b981;
        }
        
        body.dark-mode .message-bubble-admin {
            background-color: #163b54;
            border-left: 3px solid #3b82f6;
        }
        
        body.dark-mode .contact-item:hover {
            background-color: #2a2a2a;
        }
        
        body.dark-mode .contact-item.active {
            background-color: #1a3b5c;
        }
        
        body.dark-mode .inbox-tab.active {
            color: #60a5fa;
            border-bottom-color: #60a5fa;
        }
        
        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 6px;
            height: 6px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #c5c5c5;
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
        
        /* Dark mode scrollbar */
        body.dark-mode ::-webkit-scrollbar-track {
            background: #2a2a2a;
        }
        
        body.dark-mode ::-webkit-scrollbar-thumb {
            background: #555;
        }
        
        body.dark-mode ::-webkit-scrollbar-thumb:hover {
            background: #777;
        }
        
        /* Message bubbles */
        .message-bubble-admin {
            border-radius: 18px 18px 0 18px;
            background-color: #e7f3ff;
            border-left: 3px solid #3b82f6;
        }
        
        .message-bubble-user {
            border-radius: 18px 18px 18px 0;
            background-color: white;
            border-left: 3px solid #10b981;
        }
        
        .message-time {
            font-size: 0.7rem;
            color: #9ca3af;
        }
        
        .contact-item {
            transition: all 0.2s ease;
        }
        
        .contact-item:hover {
            background-color: #f3f4f6;
        }
        
        .contact-item.active {
            background-color: #ebf5ff;
            border-left: 3px solid #3b82f6;
        }
        
        .contact-item .unread-badge {
            background-color: #ef4444;
            color: white;
            border-radius: 9999px;
            padding: 2px 8px;
            font-size: 0.7rem;
            font-weight: 600;
        }
        
        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 2px 8px;
            border-radius: 20px;
            background-color: #e5e7eb;
            width: fit-content;
        }
        
        .typing-indicator span {
            height: 8px;
            width: 8px;
            margin: 0 1px;
            background-color: #9ca3af;
            display: block;
            border-radius: 50%;
            opacity: 0.4;
        }
        
        .typing-indicator span:nth-of-type(1) {
            animation: typing 1s infinite;
        }
        
        .typing-indicator span:nth-of-type(2) {
            animation: typing 1s infinite 0.2s;
        }
        
        .typing-indicator span:nth-of-type(3) {
            animation: typing 1s infinite 0.4s;
        }
        
        @keyframes typing {
            0% {
                opacity: 0.4;
                transform: translateY(0);
            }
            50% {
                opacity: 1;
                transform: translateY(-2px);
            }
            100% {
                opacity: 0.4;
                transform: translateY(0);
            }
        }
        
        .fade-enter {
            opacity: 0;
            transform: translateY(10px);
        }
        
        .fade-enter-active {
            opacity: 1;
            transform: translateY(0);
            transition: opacity 0.3s, transform 0.3s;
        }
        
        /* Animation for new messages */
        @keyframes new-message-animation {
            0% {
                transform: translateY(20px);
                opacity: 0;
            }
            100% {
                transform: translateY(0);
                opacity: 1;
            }
        }
        
        .new-message {
            animation: new-message-animation 0.3s ease-out;
        }
        
        /* Toast notifications */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            z-index: 9999;
            display: flex;
            align-items: center;
            transition: transform 0.3s ease-out, opacity 0.3s ease-out;
            transform: translateY(100px);
            opacity: 0;
        }
        
        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        .toast-success {
            background-color: #d1fae5;
            border-left: 4px solid #10b981;
            color: #065f46;
        }
        
        .toast-error {
            background-color: #fee2e2;
            border-left: 4px solid #ef4444;
            color: #b91c1c;
        }
        
        .toast-info {
            background-color: #e0f2fe;
            border-left: 4px solid #3b82f6;
            color: #1e40af;
        }
        
        .typing-box {
            transition: height 0.3s ease;
        }
        
        .chip {
            display: inline-flex;
            align-items: center;
            padding: 2px 8px 2px 12px;
            border-radius: 16px;
            font-size: 0.75rem;
            font-weight: 500;
            line-height: 1.5;
        }
        
        .chip-new {
            background-color: #fef3c7;
            color: #92400e;
        }
        
        .chip-responded {
            background-color: #d1fae5;
            color: #065f46;
        }
        
        .chip-archived {
            background-color: #e5e7eb;
            color: #4b5563;
        }
        
        .inbox-tabs {
            display: flex;
            border-bottom: 1px solid #e5e7eb;
            padding-top: 0.5rem;
        }
        
        .inbox-tab {
            padding: 0.5rem 1rem;
            font-weight: 500;
            color: #6b7280;
            border-bottom: 2px solid transparent;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .inbox-tab:hover {
            color: #374151;
        }
        
        .inbox-tab.active {
            color: #3b82f6;
            border-bottom-color: #3b82f6;
        }
        
        @media (max-width: 768px) {
            .contact-sidebar {
                position: fixed;
                left: -100%;
                top: 64px;
                bottom: 0;
                width: 300px;
                z-index: 30;
                transition: left 0.3s ease;
            }
            
            .contact-sidebar.open {
                left: 0;
            }
            
            .chat-area-container {
                padding-top: 64px;
            }
        }
        
        /* Loader styles */
        .loader {
            border: 3px solid #f3f3f3;
            border-radius: 50%;
            border-top: 3px solid #3b82f6;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Styles for HTML content in messages */
        .html-content {
            word-break: break-word;
            line-height: 1.5;
        }
        
        .html-content a {
            color: #3b82f6;
            text-decoration: underline;
        }
        
        .html-content ul, .html-content ol {
            margin-left: 1.5em;
            margin-top: 0.5em;
            margin-bottom: 0.5em;
        }
        
        .html-content p {
            margin-bottom: 0.5em;
        }
        
        .html-content strong, .html-content b {
            font-weight: 600;
        }
        
        .html-content i, .html-content em {
            font-style: italic;
        }
        
        .message-bubble-user .html-content {
            color: #374151;
        }
        
        .message-bubble-admin .html-content {
            color: #1f2937;
        }

        /* Dark mode adjustments for message content */
        body.dark-mode .message-bubble-user .html-content,
        body.dark-mode .message-bubble-admin .html-content {
            color: #e0e0e0;
        }
        
        body.dark-mode .html-content a {
            color: #60a5fa;
        }
    </style>
</head>
<body class="h-screen flex flex-col bg-gray-50">
    <!-- Top Navigation -->
    <header class="bg-blue-800 text-white py-3 px-6 shadow-md z-40 fixed top-0 left-0 right-0">
        <div class="flex justify-between items-center">
            <div class="flex items-center">
                <button id="menu-toggle" class="block md:hidden mr-3 text-white focus:outline-none">
                    <i class="fas fa-bars text-xl"></i>
                </button>
                <div class="flex items-center">
                    <div class="h-8 w-8 bg-white bg-opacity-20 rounded-md flex items-center justify-center mr-2">
                        <svg class="h-6 w-6 text-white" viewBox="0 0 100 60" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M20 10C31.0457 10 40 18.9543 40 30C40 41.0457 31.0457 50 20 50C8.9543 50 0 41.0457 0 30C0 18.9543 8.9543 10 20 10Z" fill="#fff"/>
                            <path d="M50 10C61.0457 10 70 18.9543 70 30C70 41.0457 61.0457 50 50 50C38.9543 50 30 41.0457 30 30C30 18.9543 38.9543 10 50 10Z" fill="#fff"/>
                            <path d="M80 10C91.0457 10 100 18.9543 100 30C100 41.0457 91.0457 50 80 50C68.9543 50 60 41.0457 60 30C60 18.9543 68.9543 10 80 10Z" fill="#fff"/>
                            <text x="20" y="35" font-family="Arial" font-size="16" font-weight="bold" fill="#3b82f6" text-anchor="middle">O</text>
                            <text x="50" y="35" font-family="Arial" font-size="16" font-weight="bold" fill="#3b82f6" text-anchor="middle">T</text>
                            <text x="80" y="35" font-family="Arial" font-size="16" font-weight="bold" fill="#3b82f6" text-anchor="middle">M</text>
                        </svg>
                    </div>
                    <h1 class="font-semibold text-xl">OTM Admin</h1>
                </div>
            </div>
            <div class="flex items-center">
                <div class="relative mr-4">
                    <button id="fetch-emails-button" class="flex items-center bg-blue-700 hover:bg-blue-600 rounded-full px-3 py-1 text-sm transition duration-200">
                        <i class="fas fa-sync-alt mr-2"></i>
                        <span>Check Emails</span>
                    </button>
                </div>
                <div class="relative mr-4">
                    <button id="merge-chats-button" class="flex items-center bg-blue-700 hover:bg-blue-600 rounded-full px-3 py-1 text-sm transition duration-200">
                        <i class="fas fa-compress-alt mr-2"></i>
                        <span>Merge Chats</span>
                    </button>
                </div>
                <div class="relative mr-4">
                    <button id="dark-mode-toggle" class="flex items-center bg-blue-700 hover:bg-blue-600 rounded-full px-3 py-1 text-sm transition duration-200">
                        <i class="fas fa-moon mr-2"></i>
                        <span>Dark Mode</span>
                    </button>
                </div>
                <div class="flex items-center">
                    <div class="h-8 w-8 bg-blue-700 rounded-full flex items-center justify-center mr-2">
                        <i class="fas fa-user"></i>
                    </div>
                    <span id="admin-username" class="hidden md:block">Admin</span>
                </div>
                <div class="ml-4">
                    <button id="logout-button" class="flex items-center text-white hover:text-red-200 transition duration-200">
                        <i class="fas fa-sign-out-alt"></i>
                        <span class="ml-2 hidden md:inline">Logout</span>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content Area -->
    <div class="flex flex-1 pt-14 h-full overflow-hidden">
        <!-- Contacts Sidebar -->
        <aside id="contact-sidebar" class="contact-sidebar w-80 bg-white border-r border-gray-200 flex flex-col h-full">
            <!-- Search and Stats -->
            <div class="p-4 border-b border-gray-200">
                <div class="relative">
                    <input type="text" id="search-contacts" placeholder="Search contacts..." class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-search text-gray-400"></i>
                    </div>
                </div>
                
                <div class="mt-3 flex justify-between">
                    <div class="text-xs text-gray-500">
                        <span id="total-messages">0</span> conversations
                    </div>
                    <div class="flex space-x-2 text-xs">
                        <div class="text-yellow-600 flex items-center">
                            <div class="h-2 w-2 rounded-full bg-yellow-400 mr-1"></div>
                            <span id="new-messages">0</span> new
                        </div>
                        <div class="text-green-600 flex items-center">
                            <div class="h-2 w-2 rounded-full bg-green-400 mr-1"></div>
                            <span id="responded-messages">0</span> responded
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Tabs -->
            <div class="inbox-tabs">
                <div class="inbox-tab active" data-filter="all">All</div>
                <div class="inbox-tab" data-filter="new">New</div>
                <div class="inbox-tab" data-filter="responded">Responded</div>
                <div class="inbox-tab" data-filter="archived">Archived</div>
            </div>
            
            <!-- Contact List -->
            <div class="overflow-y-auto flex-1">
                <div id="contacts-list" class="divide-y divide-gray-200">
                    <!-- Contacts will be loaded here -->
                    <div class="py-12 text-center text-gray-500">
                        <div class="flex justify-center mb-3">
                            <div class="loader"></div>
                        </div>
                        <p>Loading conversations...</p>
                    </div>
                </div>
                <div id="no-contacts" class="hidden py-16 text-center text-gray-500">
                    <i class="fas fa-inbox text-4xl mb-3 text-gray-300"></i>
                    <p>No conversations found</p>
                </div>
            </div>
            
            <!-- Footer -->
            <div class="p-3 bg-gray-50 border-t border-gray-200 text-xs text-center text-gray-500">
                Last updated: <span id="last-update-time">Just now</span>
                <button id="refresh-button" class="ml-2 text-blue-500 hover:text-blue-700">
                    <i class="fas fa-sync-alt"></i> Refresh
                </button>
            </div>
        </aside>

        <!-- Chat Area -->
        <main class="flex-1 flex flex-col h-full bg-gray-50 relative">
            <!-- Empty State -->
            <div id="empty-state" class="flex-1 flex items-center justify-center">
                <div class="text-center p-8 max-w-md">
                    <div class="bg-blue-100 rounded-full h-20 w-20 flex items-center justify-center mx-auto mb-6">
                        <i class="fas fa-comments text-blue-500 text-3xl"></i>
                    </div>
                    <h2 class="text-2xl font-semibold text-gray-700 mb-2">Select a conversation</h2>
                    <p class="text-gray-500">Choose a contact from the list to view and respond to their messages.</p>
                    <button id="check-emails-empty-state" class="mt-6 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition duration-200 flex items-center mx-auto">
                        <i class="fas fa-sync-alt mr-2"></i>
                        Check for new emails
                    </button>
                </div>
            </div>
            
            <!-- Chat Container (initially hidden) -->
            <div id="chat-container" class="flex-1 flex flex-col h-full hidden">
                <!-- Chat Header -->
                <div class="bg-white border-b border-gray-200 p-4 flex justify-between items-center shadow-sm">
                    <div class="flex items-center">
                        <div class="h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                            <span id="contact-initial" class="text-blue-600 font-semibold">J</span>
                        </div>
                        <div>
                            <h2 id="contact-name" class="font-semibold text-gray-800">John Doe</h2>
                            <div class="flex items-center">
                                <p id="contact-email" class="text-sm text-gray-500">john@example.com</p>
                                <span id="contact-status-badge" class="ml-2 chip chip-new">New</span>
                            </div>
                        </div>
                    </div>
                    <div class="flex space-x-3">
                        <button id="change-status-button" class="text-gray-500 hover:text-gray-700 focus:outline-none">
                            <i class="fas fa-tag"></i>
                        </button>
                        <div class="relative group">
                            <button class="text-gray-500 hover:text-gray-700 focus:outline-none">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                            <div class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-10 hidden group-hover:block">
                                <a href="#" id="archive-conversation" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    <i class="fas fa-archive mr-2"></i> Archive
                                </a>
                                <a href="#" id="mark-as-read" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    <i class="fas fa-check-double mr-2"></i> Mark as read
                                </a>
                                <a href="#" id="print-conversation" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                    <i class="fas fa-print mr-2"></i> Print
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Chat Messages -->
                <div id="chat-messages" class="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
                    <!-- Messages will be loaded here -->
                    <div class="flex justify-center py-12">
                        <div class="loader"></div>
                    </div>
                </div>
                
                <!-- Chat Input -->
                <div class="bg-white border-t border-gray-200 p-4">
                    <div class="bg-gray-50 rounded-lg p-3 shadow-sm">
                        <!-- Templates and Quick Tools Bar -->
                        <div class="flex flex-wrap justify-between items-center mb-3 pb-2 border-b border-gray-200">
                            <div class="flex space-x-2">
                                <div class="relative">
                                    <button id="template-dropdown-button" class="text-gray-500 hover:text-gray-700 flex items-center text-sm">
                                        <i class="fas fa-file-alt mr-1"></i>
                                        Templates
                                        <i class="fas fa-chevron-down ml-1"></i>
                                    </button>
                                    <div id="template-dropdown" class="absolute left-0 bottom-full mb-2 w-72 bg-white rounded-lg shadow-lg py-2 z-10 hidden border border-gray-200">
                                        <div class="px-3 py-2 border-b border-gray-200 text-xs text-gray-500 uppercase font-semibold">
                                            Email Templates
                                        </div>
                                        <button class="template-item w-full text-left px-4 py-2 hover:bg-gray-100 text-sm" data-template="greeting">
                                            <div class="font-medium">Greeting</div>
                                            <div class="text-xs text-gray-500 truncate">Hello, thank you for contacting us...</div>
                                        </button>
                                        <button class="template-item w-full text-left px-4 py-2 hover:bg-gray-100 text-sm" data-template="moreInfo">
                                            <div class="font-medium">Request More Information</div>
                                            <div class="text-xs text-gray-500 truncate">Could you please provide more details about...</div>
                                        </button>
                                        <button class="template-item w-full text-left px-4 py-2 hover:bg-gray-100 text-sm" data-template="followUp">
                                            <div class="font-medium">Follow-up</div>
                                            <div class="text-xs text-gray-500 truncate">I'm following up on our previous conversation...</div>
                                        </button>
                                        <button class="template-item w-full text-left px-4 py-2 hover:bg-gray-100 text-sm" data-template="pricing">
                                            <div class="font-medium">Pricing Information</div>
                                            <div class="text-xs text-gray-500 truncate">Regarding our pricing plans...</div>
                                        </button>
                                        <button class="template-item w-full text-left px-4 py-2 hover:bg-gray-100 text-sm" data-template="appointment">
                                            <div class="font-medium">Schedule Appointment</div>
                                            <div class="text-xs text-gray-500 truncate">I'd like to schedule a time to discuss...</div>
                                        </button>
                                        <button class="template-item w-full text-left px-4 py-2 hover:bg-gray-100 text-sm" data-template="thankYou">
                                            <div class="font-medium">Thank You</div>
                                            <div class="text-xs text-gray-500 truncate">Thank you for your message. We appreciate...</div>
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="relative">
                                    <button id="actions-dropdown-button" class="text-gray-500 hover:text-gray-700 flex items-center text-sm">
                                        <i class="fas fa-tools mr-1"></i>
                                        Actions
                                        <i class="fas fa-chevron-down ml-1"></i>
                                    </button>
                                    <div id="actions-dropdown" class="absolute left-0 bottom-full mb-2 w-52 bg-white rounded-lg shadow-lg py-2 z-10 hidden border border-gray-200">
                                        <button id="delete-conversation-btn" class="w-full text-left px-4 py-2 hover:bg-gray-100 text-sm flex items-center text-red-600">
                                            <i class="fas fa-trash mr-2"></i>
                                            Delete Conversation
                                        </button>
                                        <button id="delete-all-messages-btn" class="w-full text-left px-4 py-2 hover:bg-gray-100 text-sm flex items-center text-red-600">
                                            <i class="fas fa-trash-alt mr-2"></i>
                                            Delete All Messages
                                        </button>
                                        <button id="export-conversation-btn" class="w-full text-left px-4 py-2 hover:bg-gray-100 text-sm flex items-center">
                                            <i class="fas fa-file-export mr-2"></i>
                                            Export Conversation
                                        </button>
                                        <button id="print-conversation-btn" class="w-full text-left px-4 py-2 hover:bg-gray-100 text-sm flex items-center">
                                            <i class="fas fa-print mr-2"></i>
                                            Print Conversation
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <button id="quick-response-thank-you" class="text-xs px-2 py-1 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-full transition duration-200">
                                    Thank You
                                </button>
                                <button id="quick-response-followup" class="text-xs px-2 py-1 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-full transition duration-200">
                                    Will Follow Up
                                </button>
                                <button id="quick-response-received" class="text-xs px-2 py-1 bg-blue-50 hover:bg-blue-100 text-blue-700 rounded-full transition duration-200">
                                    Received
                                </button>
                            </div>
                        </div>
                        
                        <textarea id="message-input" class="w-full border-0 focus:ring-0 bg-transparent resize-none outline-none" rows="1" placeholder="Type your message..."></textarea>
                        <div class="flex justify-between items-center mt-2">
                            <div class="flex space-x-2">
                                <button class="text-gray-400 hover:text-gray-600" title="Attach file">
                                    <i class="fas fa-paperclip"></i>
                                </button>
                                <button id="emoji-button" class="text-gray-400 hover:text-gray-600" title="Insert emoji">
                                    <i class="far fa-smile"></i>
                                </button>
                                <button id="format-button" class="text-gray-400 hover:text-gray-600" title="Format text">
                                    <i class="fas fa-font"></i>
                                </button>
                            </div>
                            <button id="send-message" class="bg-blue-600 hover:bg-blue-700 text-white rounded-full px-4 py-1 flex items-center transition duration-200">
                                <span>Send</span>
                                <i class="fas fa-paper-plane ml-2"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
    
    <!-- Confirmation Modal -->
    <div id="confirmation-modal" class="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50 hidden">
        <div class="bg-white rounded-lg shadow-xl w-96 overflow-hidden">
            <div class="bg-red-600 text-white px-4 py-3 flex justify-between items-center">
                <h3 class="font-medium" id="confirmation-title">Confirm Action</h3>
                <button id="close-confirmation-modal" class="text-white hover:text-gray-200 focus:outline-none">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-4">
                <div class="text-center my-4">
                    <div class="mx-auto bg-red-100 rounded-full h-16 w-16 flex items-center justify-center mb-6">
                        <i class="fas fa-exclamation-triangle text-red-600 text-2xl"></i>
                    </div>
                    <p id="confirmation-message" class="mb-4 text-gray-700"></p>
                    <p class="text-sm text-gray-500">This action cannot be undone.</p>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 flex justify-end">
                <button id="cancel-confirmation" class="text-gray-600 bg-white px-4 py-2 rounded-md border border-gray-300 mr-2 hover:bg-gray-50 transition duration-200">
                    Cancel
                </button>
                <button id="apply-status-change" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition duration-200">
                    Apply
                </button>
            </div>
        </div>
    </div>
    
    <!-- Status Modal -->
    <div id="status-modal" class="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50 hidden">
        <div class="bg-white rounded-lg shadow-xl w-96 overflow-hidden">
            <div class="bg-blue-600 text-white px-4 py-3 flex justify-between items-center">
                <h3 class="font-medium">Change Status</h3>
                <button id="close-status-modal" class="text-white hover:text-gray-200 focus:outline-none">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-4">
                <div class="grid grid-cols-3 gap-3 my-4">
                    <div class="status-option border rounded-md p-3 text-center cursor-pointer hover:bg-blue-50 transition-colors" data-status="new">
                        <div class="mx-auto bg-yellow-100 rounded-full h-12 w-12 flex items-center justify-center mb-2">
                            <i class="fas fa-envelope text-yellow-500"></i>
                        </div>
                        <div class="font-medium">New</div>
                    </div>
                    <div class="status-option border rounded-md p-3 text-center cursor-pointer hover:bg-blue-50 transition-colors" data-status="responded">
                        <div class="mx-auto bg-green-100 rounded-full h-12 w-12 flex items-center justify-center mb-2">
                            <i class="fas fa-reply text-green-500"></i>
                        </div>
                        <div class="font-medium">Responded</div>
                    </div>
                    <div class="status-option border rounded-md p-3 text-center cursor-pointer hover:bg-blue-50 transition-colors" data-status="archived">
                        <div class="mx-auto bg-gray-100 rounded-full h-12 w-12 flex items-center justify-center mb-2">
                            <i class="fas fa-archive text-gray-500"></i>
                        </div>
                        <div class="font-medium">Archived</div>
                    </div>
                </div>
                <p class="text-sm text-gray-500 mt-3">Changing status will help you organize conversations.</p>
            </div>
            <div class="bg-gray-50 px-4 py-3 flex justify-end">
                <button id="cancel-status-change" class="text-gray-600 bg-white px-4 py-2 rounded-md border border-gray-300 mr-2 hover:bg-gray-50 transition duration-200">
                    Cancel
                </button>
                <button id="apply-status-change" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition duration-200">
                    Apply
                </button>
            </div>
        </div>
    </div>

    <!-- Notification Sound -->
    <audio id="notification-sound" src="https://cdn.jsdelivr.net/gh/ferdium/ferdium-app@develop/recipes/messenger/notification.ogg" preload="auto"></audio>

    <!-- Message templates section -->
    <script id="message-template" type="text/x-template">
        <div class="message" data-id="${id}">
            <div class="message-bubble ${sender === 'Admin' ? 'message-bubble-admin' : 'message-bubble-user'} p-3 my-2 shadow-sm new-message">
                <div class="flex justify-between items-start">
                    <div class="font-semibold text-sm text-gray-700">${sender}</div>
                    <div class="message-time">${formatDate(timestamp)}</div>
                </div>
                
                <!-- Display content based on content type -->
                <div class="mt-1 text-sm message-content ${isHtml ? 'html-content' : ''}">
                    ${renderMessageContent(displayContent, isHtml, rawHtml)}
                </div>
            </div>
        </div>
    </script>

    <!-- Toast Notifications -->
    <div id="toast-container" class="fixed bottom-5 right-5 z-50"></div>

    <script>
        // Global variables
        let contacts = [];
        let currentContactId = null;
        let statusToApply = null;
        const API_BASE_URL = '/api/admin';
        let autoRefreshInterval = null;
        let lastRefreshTime = Date.now();
        let darkMode = localStorage.getItem('darkMode') === 'true';
        let socket = null;

        // Template data
        const emailTemplates = {
            greeting: `Hello,

Thank you for contacting OTM Education. I appreciate your interest in our programs. I'm here to help with any questions you might have.

Best regards,
OTM Education Team`,
            moreInfo: `Hello,

Thank you for your message. To better assist you, could you please provide some additional information about your specific needs or questions?

This will help us tailor our response to best address your inquiry.

Best regards,
OTM Education Team`,
            followUp: `Hello,

I'm following up on our previous conversation. I wanted to check if you've had a chance to review the information I sent and if you have any additional questions.

I'm available to discuss further at your convenience.

Best regards,
OTM Education Team`,
            pricing: `Hello,

Thank you for your inquiry about our pricing. Our education programs are designed to be accessible while providing high-quality content and support.

Our current pricing options are as follows:
- Basic Package: $X/month
- Standard Package: $Y/month
- Premium Package: $Z/month

Each package includes different features and support levels. I'd be happy to discuss which option might be the best fit for your needs.

Best regards,
OTM Education Team`,
            appointment: `Hello,

I'd like to schedule a time to discuss your needs in more detail. Would you be available for a call or video meeting next week?

Please let me know what days and times work best for you, and I'll set up the appointment.

Looking forward to speaking with you.

Best regards,
OTM Education Team`,
            thankYou: `Hello,

Thank you for your message. We appreciate you taking the time to reach out to us.

Your inquiry is important to us, and we'll get back to you with a detailed response shortly.

Best regards,
OTM Education Team`
        };

        // Quick responses
        const quickResponses = {
            thankYou: "Thank you for your message. We'll review it shortly and get back to you.",
            followup: "Thank you for your message. We'll follow up with more information within 24 hours.",
            received: "We've received your message and will respond as soon as possible."
        };

        // Setup WebSocket connection
        function setupWebSocket() {
            // Check if WebSocket is supported
            if (window.WebSocket) {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${protocol}//${window.location.host}/ws/admin`;
                
                try {
                    socket = new WebSocket(wsUrl);
                    
                    socket.onopen = function() {
                        console.log('WebSocket connection established');
                        showToast('Real-time connection established', 'success');
                        
                        // Send authentication
                        socket.send(JSON.stringify({
                            type: 'auth',
                            token: getToken()
                        }));
                    };
                    
                    socket.onmessage = function(event) {
                        try {
                            const data = JSON.parse(event.data);
                            
                            if (data.type === 'new_message') {
                                handleNewMessage(data.message);
                            } else if (data.type === 'status_change') {
                                handleStatusChange(data.contactId, data.status);
                            } else if (data.type === 'new_contact') {
                                handleNewContact(data.contact);
                            }
                        } catch (error) {
                            console.error('Error processing WebSocket message:', error);
                        }
                    };
                    
                    socket.onclose = function() {
                        console.log('WebSocket connection closed');
                        
                        // Attempt to reconnect after delay
                        setTimeout(setupWebSocket, 5000);
                    };
                    
                    socket.onerror = function(error) {
                        console.error('WebSocket error:', error);
                        showToast('Connection error. Falling back to polling.', 'error');
                        
                        // Fall back to polling
                        startAutoRefresh();
                    };
                } catch (error) {
                    console.error('Error setting up WebSocket:', error);
                    
                    // Fall back to polling
                    startAutoRefresh();
                }
            } else {
                console.log('WebSocket not supported, using polling');
                startAutoRefresh();
            }
        }
        
        // Handle new message from WebSocket
        function handleNewMessage(message) {
            // Check if message is for the current conversation
            if (message.contactId === currentContactId) {
                // Find the contact
                const contact = contacts.find(c => c.id === currentContactId);
                if (contact) {
                    // Add message to responses
                    if (!contact.responses) {
                        contact.responses = [];
                    }
                    
                    contact.responses.push(message);
                    
                    // Update conversation display
                    displayConversation(contact);
                    
                    // Play notification sound
                    playNotificationSound();
                }
            }
            
            // Update the contact list
            // If the contact is not loaded yet, we'll need to refresh the list
            const contactExists = contacts.some(c => c.id === message.contactId);
            if (!contactExists) {
                loadContacts();
            } else {
                // Just update the contact's last message
                updateContactInList(message.contactId, message);
            }
        }
        
        // Handle contact status change from WebSocket
        function handleStatusChange(contactId, status) {
            // Find the contact
            const contactIndex = contacts.findIndex(c => c.id === contactId);
            if (contactIndex !== -1) {
                contacts[contactIndex].status = status;
                
                // Update UI for the contact
                updateContactStatus(contactId, status, false);
                
                // Update stats
                updateStats();
            }
        }
        
        // Handle new contact from WebSocket
        function handleNewContact(contact) {
            // Add to contacts array
            contacts.push(contact);
            
            // Update UI
            updateStats();
            renderContacts(getActiveFilter(), document.getElementById('search-contacts').value.toLowerCase());
            
            // Show notification
            showToast('New inquiry received', 'info');
            
            // Play notification sound
            playNotificationSound();
        }
        
        // Play notification sound
        function playNotificationSound() {
            try {
                const audio = document.getElementById('notification-sound');
                if (audio) {
                    audio.play().catch(e => console.warn('Could not play notification sound:', e));
                }
            } catch (error) {
                console.warn('Could not play notification sound:', error);
            }
        }
        
        // Update a contact in the list with new message info
        function updateContactInList(contactId, message) {
            const contactIndex = contacts.findIndex(c => c.id === contactId);
            if (contactIndex !== -1) {
                // Update last message info
                contacts[contactIndex].lastMessage = message.content;
                contacts[contactIndex].lastMessageTime = message.timestamp;
                
                // If message is from user and contact is not already 'new', set status to 'new'
                if (message.from !== 'Admin' && contacts[contactIndex].status !== 'new') {
                    contacts[contactIndex].status = 'new';
                }
                
                // Re-render contacts to update the UI
                renderContacts(getActiveFilter(), document.getElementById('search-contacts').value.toLowerCase());
            }
        }

        // Delete conversation
        async function deleteConversation() {
            if (!currentContactId) return;
            
            try {
                showToast('Deleting conversation...', 'info');
                
                const response = await fetch(`${API_BASE_URL}/contacts/${currentContactId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to delete conversation');
                }
                
                // Remove from local contacts array
                contacts = contacts.filter(c => c.id !== currentContactId);
                
                // Update the UI
                updateStats();
                renderContacts(getActiveFilter(), document.getElementById('search-contacts').value.toLowerCase());
                
                // Show empty state
                document.getElementById('chat-container').classList.add('hidden');
                document.getElementById('empty-state').classList.remove('hidden');
                currentContactId = null;
                
                showToast('Conversation deleted successfully', 'success');
            } catch (error) {
                console.error('Error deleting conversation:', error);
                showToast('Error deleting conversation: ' + error.message, 'error');
            }
        }
        
        // Delete all messages
        async function deleteAllMessages() {
            if (!currentContactId) return;
            
            try {
                showToast('Deleting messages...', 'info');
                
                const response = await fetch(`${API_BASE_URL}/contacts/${currentContactId}/messages`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to delete messages');
                }
                
                // Update the contact in our local array
                const contactIndex = contacts.findIndex(c => c.id === currentContactId);
                if (contactIndex !== -1) {
                    // Update with the returned contact data
                    if (data.contact) {
                        contacts[contactIndex] = data.contact;
                    } else {
                        // If no contact data returned, just clear responses
                        contacts[contactIndex].responses = [];
                    }
                    
                    // Update the UI
                    displayConversation(contacts[contactIndex]);
                }
                
                showToast('Messages deleted successfully', 'success');
            } catch (error) {
                console.error('Error deleting messages:', error);
                showToast('Error deleting messages: ' + error.message, 'error');
            }
        }

        // Setup editor buttons
        document.querySelectorAll('.editor-btn').forEach(btn => {
            if (btn.dataset.command) {
                btn.addEventListener('click', function() {
                    executeCommand(this.dataset.command);
                });
            }
        });

        // DOM Ready
        document.addEventListener('DOMContentLoaded', function() {
            checkAuth();
            setupEventListeners();
            
            // Apply dark mode if it was previously enabled
            if (darkMode) {
                document.body.classList.add('dark-mode');
                updateDarkModeButton();
            }
            
            // Initialize WebSocket connection
            setupWebSocket();
            
            // Load saved letter templates
            loadSavedTemplates();
        });
        
        // Setup Event Listeners
        function setupEventListeners() {
            // Navigation
            document.getElementById('menu-toggle').addEventListener('click', toggleMobileMenu);
            document.getElementById('logout-button').addEventListener('click', logout);
            
            // Refresh actions
            document.getElementById('refresh-button').addEventListener('click', loadContacts);
            document.getElementById('fetch-emails-button').addEventListener('click', fetchEmails);
            document.getElementById('check-emails-empty-state').addEventListener('click', fetchEmails);
            document.getElementById('merge-chats-button').addEventListener('click', mergeChats);
            document.getElementById('dark-mode-toggle').addEventListener('click', toggleDarkMode);
            
            // Letter Templates
            document.getElementById('letter-templates-button').addEventListener('click', openLetterTemplatesModal);
            document.getElementById('close-letter-modal').addEventListener('click', closeLetterTemplatesModal);
            document.getElementById('new-template-btn').addEventListener('click', createNewTemplate);
            document.getElementById('save-template-btn').addEventListener('click', saveCurrentTemplate);
            document.getElementById('use-template-btn').addEventListener('click', useCurrentTemplate);
            
            // Editor buttons
            // Message input
            const messageInput = document.getElementById('message-input');
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
                
                // Auto expand textarea
                setTimeout(() => {
                    messageInput.style.height = 'auto';
                    messageInput.style.height = (messageInput.scrollHeight) + 'px';
                }, 0);
            });
            
            document.getElementById('send-message').addEventListener('click', sendMessage);
            
            // Emoji and Format buttons
            document.getElementById('emoji-button').addEventListener('click', openEmojiPicker);
            document.getElementById('format-button').addEventListener('click', openFormatOptions);
            
            // Attach file button
            document.querySelector('.fa-paperclip').parentElement.addEventListener('click', function() {
                alert('File attachment is not yet implemented.');
            });
            
            // Templates dropdown
            document.getElementById('template-dropdown-button').addEventListener('click', toggleTemplateDropdown);
            document.querySelectorAll('.template-item').forEach(item => {
                item.addEventListener('click', function() {
                    insertTemplate(this.dataset.template);
                    toggleTemplateDropdown();
                });
            });
            
            // Actions dropdown
            document.getElementById('actions-dropdown-button').addEventListener('click', toggleActionsDropdown);
            document.getElementById('delete-conversation-btn').addEventListener('click', confirmDeleteConversation);
            document.getElementById('export-conversation-btn').addEventListener('click', exportConversation);
            document.getElementById('print-conversation-btn').addEventListener('click', printConversation);
            document.getElementById('delete-all-messages-btn').addEventListener('click', confirmDeleteAllMessages);
            
            // Quick responses
            document.getElementById('quick-response-thank-you').addEventListener('click', () => insertQuickResponse('thankYou'));
            document.getElementById('quick-response-followup').addEventListener('click', () => insertQuickResponse('followup'));
            document.getElementById('quick-response-received').addEventListener('click', () => insertQuickResponse('received'));
            
            // Status modal
            document.getElementById('change-status-button').addEventListener('click', openStatusModal);
            document.getElementById('close-status-modal').addEventListener('click', closeStatusModal);
            document.getElementById('cancel-status-change').addEventListener('click', closeStatusModal);
            document.getElementById('apply-status-change').addEventListener('click', applyStatusChange);
            
            // Three-dot menu in chat header
            const chatMenuButton = document.querySelector('.fa-ellipsis-v').parentElement;
            chatMenuButton.addEventListener('click', function(e) {
                e.stopPropagation();
                const dropdown = this.nextElementSibling;
                dropdown.classList.toggle('hidden');
            });
            
            // Chat header dropdown items
            document.getElementById('archive-conversation').addEventListener('click', function(e) {
                e.preventDefault();
                if (currentContactId) {
                    updateContactStatus(currentContactId, 'archived');
                }
            });
            
            document.getElementById('mark-as-read').addEventListener('click', function(e) {
                e.preventDefault();
                if (currentContactId) {
                    markAsRead(currentContactId);
                }
            });
            
            document.getElementById('print-conversation').addEventListener('click', function(e) {
                e.preventDefault();
                printConversation();
            });
            
            document.querySelectorAll('.status-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('.status-option').forEach(opt => opt.classList.remove('border-blue-500', 'bg-blue-50'));
                    this.classList.add('border-blue-500', 'bg-blue-50');
                    statusToApply = this.dataset.status;
                });
            });
            
            // Tabs
            document.querySelectorAll('.inbox-tab').forEach(tab => {
                tab.addEventListener('click', function() {
                    document.querySelectorAll('.inbox-tab').forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    filterContacts(this.dataset.filter);
                });
            });
            
            // Search
            document.getElementById('search-contacts').addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                filterContacts(getActiveFilter(), searchTerm);
            });
            
            // Close dropdowns when clicking outside
            document.addEventListener('click', function(event) {
                const templateDropdown = document.getElementById('template-dropdown');
                const templateButton = document.getElementById('template-dropdown-button');
                const actionsDropdown = document.getElementById('actions-dropdown');
                const actionsButton = document.getElementById('actions-dropdown-button');
                const chatMenu = document.querySelector('.fa-ellipsis-v').parentElement.nextElementSibling;
                
                if (templateDropdown && !templateDropdown.contains(event.target) && !templateButton.contains(event.target)) {
                    templateDropdown.classList.add('hidden');
                }
                
                if (actionsDropdown && !actionsDropdown.contains(event.target) && !actionsButton.contains(event.target)) {
                    actionsDropdown.classList.add('hidden');
                }
                
                if (chatMenu && !chatMenu.contains(event.target) && 
                    !event.target.classList.contains('fa-ellipsis-v') && 
                    !event.target.parentElement.classList.contains('fa-ellipsis-v')) {
                    chatMenu.classList.add('hidden');
                }
            });
        }
        
        // Toggle template dropdown
        function toggleTemplateDropdown() {
            document.getElementById('template-dropdown').classList.toggle('hidden');
            document.getElementById('actions-dropdown').classList.add('hidden');
        }
        
        // Toggle actions dropdown
        function toggleActionsDropdown() {
            document.getElementById('actions-dropdown').classList.toggle('hidden');
            document.getElementById('template-dropdown').classList.add('hidden');
        }
        
        // Insert template into message input
        function insertTemplate(templateId) {
            const messageInput = document.getElementById('message-input');
            messageInput.value = emailTemplates[templateId] || '';
            messageInput.focus();
            
            // Trigger the input event for auto-resize
            const event = new Event('input', { bubbles: true });
            messageInput.dispatchEvent(event);
        }
        
        // Insert quick response
        function insertQuickResponse(responseId) {
            const messageInput = document.getElementById('message-input');
            messageInput.value = quickResponses[responseId] || '';
            messageInput.focus();
            
            // Auto-send after a short delay
            setTimeout(sendMessage, 100);
        }
        
        // Confirm delete conversation
        function confirmDeleteConversation() {
            if (!currentContactId) return;
            
            const confirmMessage = 'Are you sure you want to delete this entire conversation? This action cannot be undone.';
            if (confirm(confirmMessage)) {
                deleteConversation();
            }
            
            // Hide dropdown
            document.getElementById('actions-dropdown').classList.add('hidden');
        }
        
        // Delete conversation
        async function deleteConversation() {
            if (!currentContactId) return;
            
            try {
                showToast('Deleting conversation...', 'info');
                
                // Note: You would need to implement this API endpoint on the server
                const response = await fetch(`${API_BASE_URL}/contacts/${currentContactId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to delete conversation');
                }
                
                // Remove from local contacts array
                contacts = contacts.filter(c => c.id !== currentContactId);
                
                // Update the UI
                updateStats();
                renderContacts(getActiveFilter(), document.getElementById('search-contacts').value.toLowerCase());
                
                // Show empty state
                document.getElementById('chat-container').classList.add('hidden');
                document.getElementById('empty-state').classList.remove('hidden');
                currentContactId = null;
                
                showToast('Conversation deleted successfully', 'success');
            } catch (error) {
                console.error('Error deleting conversation:', error);
                showToast('Error deleting conversation', 'error');
            }
        }
        
        // Confirm delete all messages
        function confirmDeleteAllMessages() {
            if (!currentContactId) return;
            
            const confirmMessage = 'Are you sure you want to delete all messages in this conversation? The initial message will remain.';
            if (confirm(confirmMessage)) {
                deleteAllMessages();
            }
            
            // Hide dropdown
            document.getElementById('actions-dropdown').classList.add('hidden');
        }
        
        // Delete all messages
        async function deleteAllMessages() {
            if (!currentContactId) return;
            
            try {
                showToast('Deleting messages...', 'info');
                
                const response = await fetch(`${API_BASE_URL}/contacts/${currentContactId}/messages`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to delete messages');
                }
                
                // Update the contact in our local array
                const contactIndex = contacts.findIndex(c => c.id === currentContactId);
                if (contactIndex !== -1) {
                    // Keep only the original message
                    contacts[contactIndex].responses = [];
                    
                    // Update the UI
                    displayConversation(contacts[contactIndex]);
                }
                
                showToast('Messages deleted successfully', 'success');
            } catch (error) {
                console.error('Error deleting messages:', error);
                showToast('Error deleting messages', 'error');
            }
        }
        
        // Export conversation
        function exportConversation() {
            if (!currentContactId) return;
            
            try {
                const contact = contacts.find(c => c.id === currentContactId);
                if (!contact) return;
                
                // Create a text version of the conversation
                let conversationText = `Conversation with ${contact.name} <${contact.email}>\n`;
                conversationText += `Started: ${new Date(contact.createdAt).toLocaleString()}\n\n`;
                
                // Initial message
                conversationText += `${contact.name} (${new Date(contact.createdAt).toLocaleString()}):\n${contact.message}\n\n`;
                
                // Responses
                if (contact.responses && contact.responses.length > 0) {
                    // Sort chronologically, oldest first
                    const sortedResponses = [...contact.responses].sort((a, b) => 
                        new Date(a.timestamp) - new Date(b.timestamp)
                    );
                    
                    sortedResponses.forEach(response => {
                        const sender = response.from === 'Admin' ? 'Admin' : contact.name;
                        conversationText += `${sender} (${new Date(response.timestamp).toLocaleString()}):\n${response.content}\n\n`;
                    });
                }
                
                // Create a blob and download it
                const blob = new Blob([conversationText], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `conversation-${contact.name.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.txt`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                // Hide dropdown
                document.getElementById('actions-dropdown').classList.add('hidden');
                
                showToast('Conversation exported successfully', 'success');
            } catch (error) {
                console.error('Error exporting conversation:', error);
                showToast('Error exporting conversation', 'error');
            }
        }
        
        // Print conversation
        function printConversation() {
            if (!currentContactId) return;
            
            try {
                const contact = contacts.find(c => c.id === currentContactId);
                if (!contact) return;
                
                // Create a new window for printing
                const printWindow = window.open('', '_blank');
                if (!printWindow) {
                    alert('Please allow pop-ups to print the conversation');
                    return;
                }
                
                // Build HTML content for printing
                let printContent = `
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Conversation with ${contact.name}</title>
                    <style>
                        body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; }
                        .header { margin-bottom: 20px; }
                        .message { margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #eee; }
                        .sender { font-weight: bold; }
                        .timestamp { color: #666; font-size: 0.8em; }
                        .content { margin-top: 5px; white-space: pre-wrap; }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>Conversation with ${contact.name}</h1>
                        <p>Email: ${contact.email}</p>
                        <p>Started: ${new Date(contact.createdAt).toLocaleString()}</p>
                    </div>
                `;
                
                // Initial message
                printContent += `
                    <div class="message">
                        <div class="sender">${contact.name}</div>
                        <div class="timestamp">${new Date(contact.createdAt).toLocaleString()}</div>
                        <div class="content">${contact.message.replace(/\n/g, '<br>')}</div>
                    </div>
                `;
                
                // Responses
                if (contact.responses && contact.responses.length > 0) {
                    // Sort chronologically, oldest first
                    const sortedResponses = [...contact.responses].sort((a, b) => 
                        new Date(a.timestamp) - new Date(b.timestamp)
                    );
                    
                    sortedResponses.forEach(response => {
                        const sender = response.from === 'Admin' ? 'Admin' : contact.name;
                        printContent += `
                            <div class="message">
                                <div class="sender">${sender}</div>
                                <div class="timestamp">${new Date(response.timestamp).toLocaleString()}</div>
                                <div class="content">${response.content.replace(/\n/g, '<br>')}</div>
                            </div>
                        `;
                    });
                }
                
                printContent += `
                </body>
                </html>
                `;
                
                // Write to the new window and print
                printWindow.document.open();
                printWindow.document.write(printContent);
                printWindow.document.close();
                
                // Wait for content to load, then print
                printWindow.onload = function() {
                    printWindow.print();
                    // printWindow.close(); // Uncomment to auto-close after print dialog
                };
                
                // Hide dropdown
                document.getElementById('actions-dropdown').classList.add('hidden');
            } catch (error) {
                console.error('Error printing conversation:', error);
                showToast('Error printing conversation', 'error');
            }
        }
        
        // Authentication check
        async function checkAuth() {
            try {
                const response = await fetch(`${API_BASE_URL}/check-auth`, {
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    window.location.href = '/adminlogin';
                    return;
                }
                
                const data = await response.json();
                if (data.user && data.user.username) {
                    document.getElementById('admin-username').textContent = data.user.username;
                }
                
                // Start auto-refresh
                startAutoRefresh();
                
                // Load contacts after authentication is confirmed
                loadContacts();
            } catch (error) {
                console.error('Authentication check failed:', error);
                window.location.href = '/adminlogin';
            }
        }
        
        // Get token from localStorage
        function getToken() {
            return localStorage.getItem('adminToken');
        }
        
        // Toggle mobile menu
        function toggleMobileMenu() {
            const sidebar = document.getElementById('contact-sidebar');
            sidebar.classList.toggle('open');
        }
        
        // Auto refresh functionality
        function startAutoRefresh() {
            // Check for new messages every 30 seconds
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
            }
            
            // Set a shorter interval for more responsive updates
            autoRefreshInterval = setInterval(loadContacts, 30000);
            
            // Add a listener to check for active conversations more frequently
            setInterval(checkCurrentConversation, 10000);
        }
        
        // Check if the current conversation needs updating
        async function checkCurrentConversation() {
            // Only check if we're currently viewing a conversation and it's been at least 10 seconds since last refresh
            if (!currentContactId || (Date.now() - lastRefreshTime) < 10000) return;
            
            try {
                const response = await fetch(`${API_BASE_URL}/contacts/${currentContactId}`, {
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) return;
                
                const data = await response.json();
                if (!data.success || !data.contact) return;
                
                // Check if the contact has been updated
                const currentContact = contacts.find(c => c.id === currentContactId);
                
                // If not found or the responses have changed, refresh the view
                if (!currentContact || 
                    (data.contact.responses && currentContact.responses && 
                     data.contact.responses.length !== currentContact.responses.length)) {
                    
                    // Update the contact in the contacts array
                    const contactIndex = contacts.findIndex(c => c.id === currentContactId);
                    if (contactIndex !== -1) {
                        contacts[contactIndex] = data.contact;
                    }
                    
                    // Refresh the conversation view
                    displayConversation(data.contact);
                    
                    // Play notification sound for new messages
                    if (data.contact.responses && currentContact && currentContact.responses &&
                        data.contact.responses.length > currentContact.responses.length) {
                        playNotificationSound();
                    }
                }
            } catch (error) {
                console.error('Error checking current conversation:', error);
            }
        }
        
        // Load contacts
        async function loadContacts() {
            const refreshButton = document.getElementById('refresh-button');
            if (refreshButton) {
                refreshButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                refreshButton.disabled = true;
            }
            
            try {
                const response = await fetch(`${API_BASE_URL}/contacts`, {
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    if (response.status === 401 || response.status === 403) {
                        showToast('Your session has expired. Please log in again.', 'error');
                        setTimeout(() => {
                            window.location.href = '/adminlogin';
                        }, 2000);
                        return;
                    }
                    throw new Error('Failed to load contacts');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to load contacts');
                }
                
                // Check if there are new messages since the last load
                const previousCount = contacts.length;
                const newCount = data.contacts ? data.contacts.length : 0;
                const previousNewMessages = contacts.filter(c => c.status === 'new').length;
                const currentNewMessages = data.contacts ? data.contacts.filter(c => c.status === 'new').length : 0;
                
                // Update the contacts array
                contacts = data.contacts || [];
                updateStats();
                
                // Apply current filter and search
                const activeFilter = getActiveFilter();
                const searchTerm = document.getElementById('search-contacts').value.toLowerCase();
                renderContacts(activeFilter, searchTerm);
                
                // Update last refresh time
                lastRefreshTime = Date.now();
                document.getElementById('last-update-time').textContent = 'Just now';
                
                // If we're viewing a contact, refresh the chat view
                if (currentContactId) {
                    const currentContact = contacts.find(c => c.id === currentContactId);
                    if (currentContact) {
                        displayConversation(currentContact);
                    }
                }
                
                // Notify if new messages were received
                if (currentNewMessages > previousNewMessages) {
                    showToast(`${currentNewMessages - previousNewMessages} new message(s) received`, 'info');
                    playNotificationSound();
                }
            } catch (error) {
                console.error('Error loading contacts:', error);
                showToast('Error loading contacts', 'error');
            } finally {
                if (refreshButton) {
                    refreshButton.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh';
                    refreshButton.disabled = false;
                }
            }
        }
        
        // Update statistics
        function updateStats() {
            const total = contacts.length;
            const newCount = contacts.filter(c => c.status === 'new').length;
            const respondedCount = contacts.filter(c => c.status === 'responded').length;
            
            document.getElementById('total-messages').textContent = total;
            document.getElementById('new-messages').textContent = newCount;
            document.getElementById('responded-messages').textContent = respondedCount;
        }
        
        // Get active filter
        function getActiveFilter() {
            const activeTab = document.querySelector('.inbox-tab.active');
            return activeTab ? activeTab.dataset.filter : 'all';
        }
        
        // Filter contacts
        function filterContacts(filter = 'all', searchTerm = '') {
            renderContacts(filter, searchTerm);
        }
        
        // Render contacts list
        function renderContacts(filter = 'all', searchTerm = '') {
            const contactsList = document.getElementById('contacts-list');
            const noContacts = document.getElementById('no-contacts');
            
            // Filter contacts
            let filteredContacts = [...contacts];
            
            // Apply status filter
            if (filter !== 'all') {
                filteredContacts = filteredContacts.filter(c => c.status === filter);
            }
            
            // Apply search filter
            if (searchTerm) {
                filteredContacts = filteredContacts.filter(c => 
                    c.name.toLowerCase().includes(searchTerm) || 
                    c.email.toLowerCase().includes(searchTerm) ||
                    c.message.toLowerCase().includes(searchTerm)
                );
            }
            
            // Sort contacts - new first, then by date
            filteredContacts.sort((a, b) => {
                // New status takes precedence
                if (a.status === 'new' && b.status !== 'new') return -1;
                if (a.status !== 'new' && b.status === 'new') return 1;
                
                // Then sort by date (newest first)
                return new Date(b.createdAt) - new Date(a.createdAt);
            });
            
            if (filteredContacts.length === 0) {
                contactsList.innerHTML = '';
                noContacts.classList.remove('hidden');
                return;
            }
            
            noContacts.classList.add('hidden');
            contactsList.innerHTML = '';
            
            filteredContacts.forEach(contact => {
                // Get preview text from latest message
                let previewText = contact.message;
                const hasResponses = contact.responses && contact.responses.length > 0;
                
                if (hasResponses) {
                    // Get the most recent response
                    const latestResponse = [...contact.responses].sort((a, b) => {
                        return new Date(b.timestamp) - new Date(a.timestamp);
                    })[0];
                    
                    previewText = latestResponse.content;
                }
                
                // Truncate preview
                const truncatedPreview = previewText.length > 60 
                    ? previewText.substring(0, 60) + '...'
                    : previewText;
                
                // Format date
                const date = new Date(contact.createdAt);
                const now = new Date();
                let formattedDate;
                
                if (date.toDateString() === now.toDateString()) {
                    // Today - show time
                    formattedDate = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                } else if (date.getFullYear() === now.getFullYear()) {
                    // This year - show month and day
                    formattedDate = date.toLocaleDateString([], { month: 'short', day: 'numeric' });
                } else {
                    // Different year - show date with year
                    formattedDate = date.toLocaleDateString([], { month: 'short', day: 'numeric', year: 'numeric' });
                }
                
                // Check if this is the active contact
                const isActive = contact.id === currentContactId;
                
                // Create contact item
                const contactItem = document.createElement('div');
                contactItem.className = `contact-item p-3 cursor-pointer ${isActive ? 'active' : ''}`;
                contactItem.dataset.id = contact.id;
                
                // Get contact initial for avatar
                const initial = contact.name.charAt(0).toUpperCase();
                
                contactItem.innerHTML = `
                    <div class="flex items-center">
                        <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mr-3 flex-shrink-0">
                            <span class="text-blue-600 font-medium">${initial}</span>
                        </div>
                        <div class="flex-1 min-w-0">
                            <div class="flex justify-between items-center">
                                <h3 class="font-medium text-gray-900 truncate">${contact.name}</h3>
                                <span class="text-xs text-gray-500">${formattedDate}</span>
                            </div>
                            <div class="flex justify-between items-center mt-1">
                                <p class="text-sm text-gray-600 truncate">${truncatedPreview}</p>
                                ${contact.status === 'new' ? '<span class="unread-badge">New</span>' : ''}
                            </div>
                        </div>
                    </div>
                `;
                
                contactItem.addEventListener('click', () => {
                    // Update active state in UI
                    document.querySelectorAll('.contact-item').forEach(item => {
                        item.classList.remove('active');
                    });
                    contactItem.classList.add('active');
                    
                    // Display chat for selected contact
                    displayConversation(contact);
                    
                    // On mobile, close the sidebar after selecting a contact
                    if (window.innerWidth < 768) {
                        document.getElementById('contact-sidebar').classList.remove('open');
                    }
                });
                
                contactsList.appendChild(contactItem);
            });
        }
        
        // Function to display conversation
        function displayConversation(contact) {
            currentContactId = contact.id;
            
            // Clear the chat area
            const chatArea = document.getElementById('chat-messages');
            chatArea.innerHTML = '';
            
            // Set the active contact
            document.querySelectorAll('.contact-item').forEach(item => {
                item.classList.remove('active');
            });
            const contactItem = document.querySelector(`[data-id="${contact.id}"]`);
            if (contactItem) {
                contactItem.classList.add('active');
            }
            
            // Set the chat header
            document.getElementById('contact-name').textContent = contact.name;
            document.getElementById('contact-email').textContent = contact.email;
            
            // Update status badge
            const statusBadge = document.getElementById('contact-status-badge');
            statusBadge.className = 'ml-2 chip';
            statusBadge.textContent = contact.status;
            
            if (contact.status === 'new') {
                statusBadge.classList.add('chip-new');
            } else if (contact.status === 'responded') {
                statusBadge.classList.add('chip-responded');
            } else {
                statusBadge.classList.add('chip-archived');
            }
            
            // Collect all messages including responses and initial message
            const allMessages = [];
            
            // Add responses (make sure they're properly decrypted)
            if (contact.responses && contact.responses.length > 0) {
                contact.responses.forEach(response => {
                    // Check if the response content appears to be encrypted
                    const contentLooksEncrypted = typeof response.content === 'string' && 
                        (response.content.startsWith('enc:') || 
                         response.content.length > 100 && 
                         /^[A-Za-z0-9+/=]+$/.test(response.content));
                    
                    // If it looks encrypted, trigger a refresh of the whole contact
                    if (contentLooksEncrypted) {
                        console.log('Found encrypted content, refreshing contact');
                        setTimeout(() => loadContacts(), 500);
                        return;
                    }
                    
                    allMessages.push(response);
                });
            }
            
            // Add initial message
            allMessages.push({
                id: 'initial',
                from: contact.email,
                content: contact.message,
                timestamp: contact.createdAt
            });
            
            // Sort messages by timestamp, newest first for display (proper chronological order)
            allMessages.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            // Check for any timestamps that are too close (within 1 second)
            // This helps prevent message display issues due to very close timestamps
            for (let i = 1; i < allMessages.length; i++) {
                const curr = new Date(allMessages[i].timestamp).getTime();
                const prev = new Date(allMessages[i-1].timestamp).getTime();
                if (Math.abs(curr - prev) < 1000) {
                    // Add a small offset to ensure proper ordering
                    allMessages[i].timestamp = new Date(curr + 1000).toISOString();
                }
            }
            
            // Display messages in reverse chronological order
            let hasEncryptedContent = false;
            allMessages.forEach(message => {
                // Check if this message appears to have encrypted content
                if (typeof message.content === 'string' && 
                    (message.content.startsWith('enc:') || 
                     (message.content.length > 100 && /^[A-Za-z0-9+/=]+$/.test(message.content)))) {
                    hasEncryptedContent = true;
                }
                
                // Render the message
                chatArea.innerHTML += renderMessage(message);
            });
            
            // If we found encrypted content, refresh the contact data
            if (hasEncryptedContent) {
                console.log('Found encrypted content, refreshing contact data');
                setTimeout(() => {
                    fetch(`${API_BASE_URL}/contacts/${contact.id}`, {
                        headers: {
                            'Authorization': `Bearer ${getToken()}`
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.contact) {
                            // Update the contact in our contacts array
                            const idx = contacts.findIndex(c => c.id === contact.id);
                            if (idx !== -1) {
                                contacts[idx] = data.contact;
                            }
                            
                            // Re-display the conversation
                            displayConversation(data.contact);
                        }
                    })
                    .catch(error => console.error('Error refreshing contact:', error));
                }, 500);
            }
            
            // Update the status dropdown if it exists
            const statusDropdown = document.getElementById('status-dropdown');
            if (statusDropdown) {
                statusDropdown.value = contact.status;
            }
            
            // Show the chat area and hide empty state
            document.getElementById('chat-container').classList.remove('hidden');
            document.getElementById('empty-state').classList.add('hidden');
            
            // Scroll to top to show the most recent messages
            chatArea.scrollTop = 0;
            
            // Mark contact as read if it's new
            if (contact.status === 'new') {
                updateContactStatus(contact.id, 'responded');
            }
        }
        
        // Function to render a conversation message
        function renderMessage(message) {
            const isAdmin = message.from === 'Admin';
            const sender = isAdmin ? 'Admin' : message.from;
            
            // Ensure timestamp is a valid date
            let timestamp = message.timestamp;
            if (!timestamp) {
                timestamp = new Date().toISOString();
            }
            
            // Determine if the content is HTML (check the flag or try to detect)
            const isHtml = message.isHtml || 
                (message.content && typeof message.content === 'string' && 
                 (message.content.startsWith('<') || message.content.includes('<div') || message.content.includes('<p')));
            
            // Use the displayContent field if available, otherwise use content
            let displayContent = message.displayContent || message.content;
            
            // If it looks like encrypted content, show a placeholder
            if (typeof displayContent === 'string' && 
                (displayContent.startsWith('enc:') || 
                 (displayContent.length > 100 && /^[A-Za-z0-9+/=]+$/.test(displayContent)))) {
                displayContent = 'Loading message content...';
            }
            
            // Get raw HTML if available (for better rendering)
            const rawHtml = message.rawHtml || null;
            
            // Use the template to render the message
            const template = document.getElementById('message-template').innerHTML;
            return template
                .replace(/\${id}/g, message.id || 'msg-' + Date.now())
                .replace(/\${sender}/g, sender)
                .replace(/\${timestamp}/g, timestamp)
                .replace(/\${formatDate\(timestamp\)}/g, formatDate(new Date(timestamp)))
                .replace(/\${sender === 'Admin' \? 'message-bubble-admin' : 'message-bubble-user'}/g, 
                    isAdmin ? 'message-bubble-admin' : 'message-bubble-user')
                .replace(/\${isHtml \? 'html-content' : ''}/g, isHtml ? 'html-content' : '')
                .replace(/\${renderMessageContent\(displayContent, isHtml, rawHtml\)}/g, 
                    renderMessageContent(displayContent, isHtml, rawHtml));
        }
        
        // Update contact status and optionally add admin response
        async function updateContactStatus(contactId, status, responseText = null) {
            try {
                const response = await fetch(`${API_BASE_URL}/contacts/${contactId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getToken()}`
                    },
                    body: JSON.stringify({
                        status: status,
                        response: responseText
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to update status');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to update status');
                }
                
                // Update the contact in the contacts list
                if (data.contact) {
                    const contactIndex = contacts.findIndex(c => c.id === data.contact.id);
                    if (contactIndex !== -1) {
                        contacts[contactIndex] = data.contact;
                        
                        // If this is the current contact, update the chat view
                        if (currentContactId === data.contact.id) {
                            displayConversation(data.contact);
                        }
                        
                        // Update the contacts list
                        updateStats();
                        
                        // Apply current filter and search
                        const activeFilter = getActiveFilter();
                        const searchTerm = document.getElementById('search-contacts').value.toLowerCase();
                        renderContacts(activeFilter, searchTerm);
                    }
                }
                
                if (responseText) {
                    showToast('Message sent successfully', 'success');
                } else {
                    showToast(`Status updated to ${status}`, 'success');
                }
                
                return data.contact;
            } catch (error) {
                console.error('Error updating status:', error);
                showToast('Error updating status', 'error');
                return null;
            }
        }
        
        // Mark a contact as read (change status to 'responded' if it's 'new')
        function markAsRead(contactId) {
            const contact = contacts.find(c => c.id === contactId);
            if (contact && contact.status === 'new') {
                updateContactStatus(contactId, 'responded');
            }
        }
        
        // Send message
        async function sendMessage() {
            if (!currentContactId) return;
            
            const messageInput = document.getElementById('message-input');
            const responseText = messageInput.value.trim();
            
            if (!responseText) {
                return;
            }
            
            // Disable send button and input
            const sendButton = document.getElementById('send-message');
            sendButton.disabled = true;
            sendButton.innerHTML = '<div class="loader mr-2"></div><span>Sending...</span>';
            messageInput.disabled = true;
            
            try {
                // Use updateContactStatus with 'responded' status and the message text
                const updatedContact = await updateContactStatus(currentContactId, 'responded', responseText);
                
                // Clear input if successful
                if (updatedContact) {
                    messageInput.value = '';
                    messageInput.style.height = 'auto';
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showToast('Error sending message', 'error');
            } finally {
                // Re-enable send button and input
                sendButton.disabled = false;
                sendButton.innerHTML = '<span>Send</span><i class="fas fa-paper-plane ml-2"></i>';
                messageInput.disabled = false;
                messageInput.focus();
            }
        }
        
        // Handle HTML content safely
        function renderMessageContent(content, isHtml, rawHtml) {
            if (!content) return '';
            
            // If content appears to be encrypted, show a loading placeholder
            if (typeof content === 'string' && 
                (content.startsWith('enc:') || 
                 (content.length > 100 && /^[A-Za-z0-9+/=]+$/.test(content)))) {
                return '<div class="p-2 bg-gray-100 rounded">Loading message content...</div>';
            }
            
            if (isHtml) {
                // If raw HTML is available and we're in a modern browser, render it in a sandbox iframe
                if (rawHtml && window.DOMPurify) {
                    // Use DOMPurify to sanitize the HTML content
                    return DOMPurify.sanitize(rawHtml, {
                        ALLOWED_TAGS: ['p', 'br', 'a', 'ul', 'ol', 'li', 'b', 'i', 'strong', 'em', 'small', 'div', 'span'],
                        ALLOWED_ATTR: ['href', 'target', 'rel', 'style'],
                    });
                }
                
                // With regular HTML content, do simplified display
                // Convert line breaks to <br> and escape the content
                return escapeHtml(content).replace(/\n/g, '<br>');
            }
            
            // For text content, just convert line breaks to <br> and escape HTML
            return escapeHtml(content).replace(/\n/g, '<br>');
        }
        
        // Escape HTML to prevent XSS
        function escapeHtml(text) {
            if (!text) return '';
            
            // Convert special characters to HTML entities
            return text
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
        }
        
        // Fetch emails
        async function fetchEmails() {
            try {
                const button = document.getElementById('fetch-emails-button');
                button.disabled = true;
                button.innerHTML = '<div class="loader mr-2"></div><span>Checking...</span>';
                
                document.getElementById('check-emails-empty-state').disabled = true;
                document.getElementById('check-emails-empty-state').innerHTML = '<div class="loader mr-2"></div><span>Checking...</span>';
                
                const response = await fetch(`${API_BASE_URL}/fetch-emails`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch emails');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to fetch emails');
                }
                
                // If contacts data is returned, update UI immediately
                if (data.contacts) {
                    contacts = data.contacts;
                    updateStats();
                    
                    // Apply current filter and search
                    const activeFilter = getActiveFilter();
                    const searchTerm = document.getElementById('search-contacts').value.toLowerCase();
                    renderContacts(activeFilter, searchTerm);
                    
                    // If we're viewing a contact, refresh the chat view
                    if (currentContactId) {
                        const currentContact = contacts.find(c => c.id === currentContactId);
                        if (currentContact) {
                            displayConversation(currentContact);
                        }
                    }
                    
                    showToast('Email check completed', 'success');
                } else {
                    // Otherwise wait for loading
                    showToast('Email check initiated', 'info');
                    setTimeout(loadContacts, 2000);
                }
            } catch (error) {
                console.error('Error fetching emails:', error);
                showToast('Error checking emails', 'error');
            } finally {
                const button = document.getElementById('fetch-emails-button');
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-sync-alt mr-2"></i><span>Check Emails</span>';
                
                document.getElementById('check-emails-empty-state').disabled = false;
                document.getElementById('check-emails-empty-state').innerHTML = '<i class="fas fa-sync-alt mr-2"></i>Check for new emails';
            }
        }
        
        // Merge chats from the same email address
        async function mergeChats() {
            try {
                const button = document.getElementById('merge-chats-button');
                button.disabled = true;
                button.innerHTML = '<div class="loader mr-2"></div><span>Merging...</span>';
                
                const response = await fetch(`${API_BASE_URL}/merge-chats`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to merge chats');
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message || 'Failed to merge chats');
                }
                
                // If contacts data is returned, update UI immediately
                if (data.contacts) {
                    contacts = data.contacts;
                    updateStats();
                    
                    // Apply current filter and search
                    const activeFilter = getActiveFilter();
                    const searchTerm = document.getElementById('search-contacts').value.toLowerCase();
                    renderContacts(activeFilter, searchTerm);
                    
                    // If we're viewing a contact, refresh the chat view
                    if (currentContactId) {
                        const currentContact = contacts.find(c => c.id === currentContactId);
                        if (currentContact) {
                            displayConversation(currentContact);
                        } else {
                            // The current contact may have been merged into another one
                            // In this case, show the empty state
                            document.getElementById('chat-container').classList.add('hidden');
                            document.getElementById('empty-state').classList.remove('hidden');
                            currentContactId = null;
                        }
                    }
                    
                    showToast(data.message || 'Chats merged successfully', 'success');
                }
            } catch (error) {
                console.error('Error merging chats:', error);
                showToast('Error merging chats: ' + error.message, 'error');
            } finally {
                const button = document.getElementById('merge-chats-button');
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-compress-alt mr-2"></i><span>Merge Chats</span>';
            }
        }
        
        // Status modal functions
        function openStatusModal() {
            const modal = document.getElementById('status-modal');
            if (!modal) return;
            
            // Show the modal
            modal.classList.remove('hidden');
            
            // Pre-select current status
            const contact = contacts.find(c => c.id === currentContactId);
            if (contact) {
                const currentStatus = contact.status || 'new';
                statusToApply = currentStatus;
                
                // Highlight the current status option
                document.querySelectorAll('.status-option').forEach(option => {
                    if (option.dataset.status === currentStatus) {
                        option.classList.add('border-blue-500', 'bg-blue-50');
                    } else {
                        option.classList.remove('border-blue-500', 'bg-blue-50');
                    }
                });
            }
        }
        
        function closeStatusModal() {
            const modal = document.getElementById('status-modal');
            if (modal) {
                modal.classList.add('hidden');
            }
        }
        
        async function applyStatusChange() {
            if (!currentContactId || !statusToApply) {
                closeStatusModal();
                return;
            }
            
            try {
                await updateContactStatus(currentContactId, statusToApply);
                closeStatusModal();
            } catch (error) {
                console.error('Error updating status:', error);
                showToast('Error updating status', 'error');
                closeStatusModal();
            }
        }
        
        // Logout
        async function logout() {
            try {
                await fetch(`${API_BASE_URL}/logout`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${getToken()}`
                    }
                });
                
                // Clear token and redirect
                localStorage.removeItem('adminToken');
                window.location.href = '/adminlogin';
            } catch (error) {
                console.error('Logout failed:', error);
                // Still redirect even if API call fails
                localStorage.removeItem('adminToken');
                window.location.href = '/adminlogin';
            }
        }
        
        // Toast notifications
        function showToast(message, type = 'info', duration = 3000) {
            const toastContainer = document.getElementById('toast-container');
            
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast toast-${type} flex items-center mb-3`;
            
            // Add appropriate icon based on type
            let icon = 'info-circle';
            if (type === 'success') icon = 'check-circle';
            if (type === 'error') icon = 'exclamation-circle';
            if (type === 'warning') icon = 'exclamation-triangle';
            
            // Set content
            toast.innerHTML = `
                <i class="fas fa-${icon} mr-2"></i>
                <span>${message}</span>
            `;
            
            // Add to container
            toastContainer.appendChild(toast);
            
            // Trigger animation
            setTimeout(() => {
                toast.classList.add('show');
            }, 10);
            
            // Remove after duration
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    toast.remove();
                }, 300); // Wait for fade out animation
            }, duration);
        }
        
        // Play notification sound
        function playNotificationSound() {
            const audio = document.getElementById('notification-sound');
            if (audio) {
                audio.play().catch(e => console.log('Could not play notification sound', e));
            }
        }
        
        // Utility function to format dates
        function formatDate(date) {
            if (!date) return '';
            
            try {
                const now = new Date();
                const diff = now - date;
                const seconds = Math.floor(diff / 1000);
                const minutes = Math.floor(seconds / 60);
                const hours = Math.floor(minutes / 60);
                const days = Math.floor(hours / 24);
                
                // Just now (less than 60 seconds ago)
                if (seconds < 60) {
                    return 'Just now';
                }
                
                // Minutes
                if (minutes < 60) {
                    return `${minutes}m ago`;
                }
                
                // Hours
                if (hours < 24) {
                    return `${hours}h ago`;
                }
                
                // Today (format as time)
                if (date.toDateString() === now.toDateString()) {
                    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                }
                
                // Yesterday
                const yesterday = new Date();
                yesterday.setDate(now.getDate() - 1);
                if (date.toDateString() === yesterday.toDateString()) {
                    return 'Yesterday';
                }
                
                // This week
                if (days < 7) {
                    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                    return dayNames[date.getDay()];
                }
                
                // This year (format as month/day)
                if (date.getFullYear() === now.getFullYear()) {
                    return date.toLocaleDateString([], { month: 'short', day: 'numeric' });
                }
                
                // Different year (format with year)
                return date.toLocaleDateString([], { month: 'short', day: 'numeric', year: 'numeric' });
            } catch (e) {
                console.error('Error formatting date:', e);
                return date.toString();
            }
        }
        
        // Toggle dark mode
        function toggleDarkMode() {
            darkMode = !darkMode;
            
            if (darkMode) {
                document.body.classList.add('dark-mode');
            } else {
                document.body.classList.remove('dark-mode');
            }
            
            // Save the preference
            localStorage.setItem('darkMode', darkMode);
            
            // Update button icon
            updateDarkModeButton();
        }
        
        // Update dark mode button icon and text
        function updateDarkModeButton() {
            const button = document.getElementById('dark-mode-toggle');
            if (darkMode) {
                button.innerHTML = '<i class="fas fa-sun mr-2"></i><span>Light Mode</span>';
            } else {
                button.innerHTML = '<i class="fas fa-moon mr-2"></i><span>Dark Mode</span>';
            }
        }

        // HTML Letter templates
        let letterTemplates = [
            {
                id: 'official-response',
                name: 'Official Response',
                content: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="text-align: center; padding: 20px 0;">
                        <img src="https://placekitten.com/600/100" alt="Company Logo" style="max-width: 200px;">
                    </div>
                    <div style="padding: 20px; border-top: 3px solid #3b82f6; border-bottom: 3px solid #3b82f6;">
                        <h2 style="color: #3b82f6;">Thank You for Your Inquiry</h2>
                        <p>Dear [Client Name],</p>
                        <p>Thank you for reaching out to OTM Education. We have received your inquiry and are pleased to provide you with the information you requested.</p>
                        <p>At OTM Education, we are committed to providing high-quality educational services and support. Our team of experienced professionals is dedicated to helping you achieve your goals.</p>
                        <p>If you have any further questions or would like to schedule a consultation, please don't hesitate to contact us.</p>
                        <p>Best regards,</p>
                        <p><strong>OTM Education Team</strong></p>
                    </div>
                    <div style="text-align: center; padding: 20px 0; font-size: 12px; color: #666;">
                        <p>© 2023 OTM Education. All rights reserved.</p>
                        <p>123 Education Street, Knowledge City, Country</p>
                        <p>Phone: (123) 456-7890 | Email: info@otmeducation.com</p>
                    </div>
                </div>
                `
            },
            {
                id: 'welcome-letter',
                name: 'Welcome Letter',
                content: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="background-color: #3b82f6; padding: 20px; text-align: center; color: white;">
                        <h1>Welcome to OTM Education!</h1>
                    </div>
                    <div style="padding: 20px; border-left: 1px solid #e5e7eb; border-right: 1px solid #e5e7eb;">
                        <p>Dear [Client Name],</p>
                        <p>Welcome to the OTM Education family! We are thrilled to have you join us and are excited to be part of your educational journey.</p>
                        <p>Here's what you can expect from us:</p>
                        <ul>
                            <li>Dedicated support from our experienced team</li>
                            <li>Access to premium educational resources</li>
                            <li>Regular progress updates and guidance</li>
                            <li>Opportunities for growth and advancement</li>
                        </ul>
                        <p>Your success is our priority, and we look forward to helping you achieve your goals.</p>
                        <p>To get started, please [specific instructions or next steps].</p>
                        <p>If you have any questions, feel free to reach out to us at any time.</p>
                        <p>Warm regards,</p>
                        <p><strong>The OTM Education Team</strong></p>
                    </div>
                    <div style="background-color: #f3f4f6; padding: 15px; text-align: center;">
                        <p style="margin: 0; font-size: 12px;">
                            <a href="#" style="color: #3b82f6; text-decoration: none;">Website</a> |
                            <a href="#" style="color: #3b82f6; text-decoration: none;">Contact Us</a> |
                            <a href="#" style="color: #3b82f6; text-decoration: none;">Privacy Policy</a>
                        </p>
                        <p style="margin-top: 10px; font-size: 12px; color: #6b7280;">
                            © 2023 OTM Education. All rights reserved.
                        </p>
                    </div>
                </div>
                `
            },
            {
                id: 'follow-up-letter',
                name: 'Follow-up Letter',
                content: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="border-bottom: 2px solid #3b82f6; padding-bottom: 15px; margin-bottom: 20px;">
                        <h2 style="color: #3b82f6;">Following Up on Your Recent Inquiry</h2>
                    </div>
                    <div>
                        <p>Dear [Client Name],</p>
                        <p>I hope this email finds you well. I'm following up on your recent inquiry about our educational services.</p>
                        <p>I wanted to check if you have any additional questions or if there's any further information I can provide to help you make a decision.</p>
                        <p>We're currently offering a special promotion for new clients who sign up before [date]. This includes:</p>
                        <ul>
                            <li>Complimentary initial assessment</li>
                            <li>10% discount on your first three months</li>
                            <li>Free access to our premium resources library</li>
                        </ul>
                        <p>I'd be happy to schedule a call to discuss how we can best meet your educational needs.</p>
                        <p>Looking forward to hearing from you soon.</p>
                        <p>Best regards,</p>
                        <p><strong>[Your Name]</strong><br>
                        Education Consultant<br>
                        OTM Education</p>
                    </div>
                    <div style="margin-top: 30px; padding-top: 15px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280;">
                        <p>This email is intended for [Client Name]. If you received this in error, please disregard and notify us.</p>
                    </div>
                </div>
                `
            }
        ];

        let currentTemplateId = null;

        // DOM Ready
        document.addEventListener('DOMContentLoaded', function() {
            checkAuth();
            setupEventListeners();
            
            // Apply dark mode if it was previously enabled
            if (darkMode) {
                document.body.classList.add('dark-mode');
                updateDarkModeButton();
            }
            
            // Initialize WebSocket connection
            setupWebSocket();
            
            // Load saved letter templates
            loadSavedTemplates();
        });
        
        // LETTER TEMPLATES FUNCTIONS
        
        // Open letter templates modal
        function openLetterTemplatesModal() {
            document.getElementById('letter-templates-modal').classList.remove('hidden');
            loadTemplatesList();
        }
        
        // Close letter templates modal
        function closeLetterTemplatesModal() {
            document.getElementById('letter-templates-modal').classList.add('hidden');
        }
        
        // Load templates list
        function loadTemplatesList() {
            const templatesList = document.getElementById('templates-list');
            templatesList.innerHTML = '';
            
            letterTemplates.forEach(template => {
                const item = document.createElement('div');
                item.className = 'p-3 hover:bg-gray-200 cursor-pointer';
                item.dataset.id = template.id;
                item.innerHTML = `
                    <div class="flex justify-between items-center">
                        <span class="font-medium">${template.name}</span>
                        <button class="delete-template-btn text-red-500 hover:text-red-700" data-id="${template.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                
                item.addEventListener('click', function(e) {
                    // Don't trigger if delete button was clicked
                    if (e.target.closest('.delete-template-btn')) return;
                    
                    loadTemplate(template.id);
                });
                
                templatesList.appendChild(item);
            });
            
            // Add delete event listeners
            document.querySelectorAll('.delete-template-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    deleteTemplate(this.dataset.id);
                });
            });
        }
        
        // Load template into editor
        function loadTemplate(id) {
            const template = letterTemplates.find(t => t.id === id);
            if (template) {
                document.getElementById('template-name').value = template.name;
                document.getElementById('editor-content').innerHTML = template.content;
                currentTemplateId = template.id;
                
                // Highlight the selected template
                document.querySelectorAll('#templates-list > div').forEach(item => {
                    item.classList.remove('bg-blue-100');
                });
                document.querySelector(`[data-id="${id}"]`).classList.add('bg-blue-100');
            }
        }
        
        // Create new template
        function createNewTemplate() {
            document.getElementById('template-name').value = 'New Template';
            document.getElementById('editor-content').innerHTML = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <h2>Your New Template</h2>
                <p>Start editing this template to create your custom email letter.</p>
                <p>You can format text, add images, and create professional-looking emails.</p>
            </div>
            `;
            
            currentTemplateId = 'template-' + Date.now();
            
            // Deselect all templates
            document.querySelectorAll('#templates-list > div').forEach(item => {
                item.classList.remove('bg-blue-100');
            });
        }
        
        // Save current template
        function saveCurrentTemplate() {
            const name = document.getElementById('template-name').value.trim();
            const content = document.getElementById('editor-content').innerHTML;
            
            if (!name) {
                showToast('Please enter a template name', 'error');
                return;
            }
            
            // Check if editing existing or creating new
            const existingIndex = letterTemplates.findIndex(t => t.id === currentTemplateId);
            
            if (existingIndex !== -1) {
                // Update existing template
                letterTemplates[existingIndex].name = name;
                letterTemplates[existingIndex].content = content;
            } else {
                // Create new template
                letterTemplates.push({
                    id: currentTemplateId,
                    name: name,
                    content: content
                });
            }
            
            // Save to localStorage
            localStorage.setItem('letterTemplates', JSON.stringify(letterTemplates));
            
            // Refresh the templates list
            loadTemplatesList();
            
            showToast('Template saved successfully', 'success');
        }
        
        // Use current template
        function useCurrentTemplate() {
            const content = document.getElementById('editor-content').innerHTML;
            
            // Insert the HTML content into the message
            insertHtmlContent(content);
            
            // Close the modal
            closeLetterTemplatesModal();
            
            showToast('Template added to your message', 'success');
        }
        
        // Insert HTML content into the message
        function insertHtmlContent(html) {
            // Get the current contact
            if (!currentContactId) {
                showToast('Please select a conversation first', 'error');
                return;
            }
            
            const contact = contacts.find(c => c.id === currentContactId);
            if (!contact) {
                showToast('Contact not found', 'error');
                return;
            }
            
            // Replace placeholders with actual data
            let processedHtml = html
                .replace(/\[Client Name\]/g, contact.name)
                .replace(/\[date\]/g, new Date().toLocaleDateString());
            
            // Set the message input to the template HTML
            const messageInput = document.getElementById('message-input');
            messageInput.value = processedHtml;
            
            // Focus the input
            messageInput.focus();
        }
        
        // Delete template
        function deleteTemplate(id) {
            if (confirm('Are you sure you want to delete this template?')) {
                letterTemplates = letterTemplates.filter(t => t.id !== id);
                
                // Save to localStorage
                localStorage.setItem('letterTemplates', JSON.stringify(letterTemplates));
                
                // Refresh the templates list
                loadTemplatesList();
                
                // Clear editor if the current template was deleted
                if (currentTemplateId === id) {
                    document.getElementById('template-name').value = '';
                    document.getElementById('editor-content').innerHTML = '';
                    currentTemplateId = null;
                }
                
                showToast('Template deleted successfully', 'success');
            }
        }
        
        // Execute editor command
        function executeCommand(command) {
            if (command === 'createLink') {
                const url = prompt('Enter the link URL');
                if (url) document.execCommand(command, false, url);
            } else if (command === 'insertImage') {
                const url = prompt('Enter the image URL');
                if (url) document.execCommand(command, false, url);
            } else {
                document.execCommand(command, false, null);
            }
            
            // Focus back on the editor
            document.getElementById('editor-content').focus();
        }
        
        // Load saved templates from localStorage
        function loadSavedTemplates() {
            const saved = localStorage.getItem('letterTemplates');
            if (saved) {
                try {
                    const templates = JSON.parse(saved);
                    // Merge with default templates, but prefer saved ones
                    const savedIds = templates.map(t => t.id);
                    letterTemplates = [
                        ...templates,
                        ...letterTemplates.filter(t => !savedIds.includes(t.id))
                    ];
                } catch (e) {
                    console.error('Error loading saved templates:', e);
                }
            }
        }

        // Open emoji picker
        function openEmojiPicker() {
            const messageInput = document.getElementById('message-input');
            
            // Create a simple popup for emoji selection
            const emojiPopup = document.createElement('div');
            emojiPopup.className = 'bg-white rounded-lg shadow-lg p-3 absolute bottom-20 left-0 z-10 grid grid-cols-8 gap-2 max-w-md';
            emojiPopup.id = 'emoji-popup';
            
            // Common emojis
            const emojis = ['😊', '👍', '🙏', '❤️', '👋', '🔥', '✅', '⭐', 
                           '😂', '🎉', '👏', '🤔', '📝', '📄', '📊', '📅',
                           '💡', '⚠️', '❓', '📧', '📱', '💻', '🌎', '🏢'];
            
            // Add emojis to the popup
            emojis.forEach(emoji => {
                const emojiButton = document.createElement('button');
                emojiButton.className = 'text-2xl hover:bg-gray-100 rounded p-1 cursor-pointer';
                emojiButton.textContent = emoji;
                emojiButton.addEventListener('click', function() {
                    // Insert emoji at cursor position
                    const cursorPos = messageInput.selectionStart;
                    const textBefore = messageInput.value.substring(0, cursorPos);
                    const textAfter = messageInput.value.substring(cursorPos);
                    messageInput.value = textBefore + emoji + textAfter;
                    
                    // Set cursor position after the inserted emoji
                    messageInput.selectionStart = cursorPos + emoji.length;
                    messageInput.selectionEnd = cursorPos + emoji.length;
                    messageInput.focus();
                    
                    // Close popup
                    document.body.removeChild(emojiPopup);
                });
                emojiPopup.appendChild(emojiButton);
            });
            
            // Add close button
            const closeButton = document.createElement('button');
            closeButton.className = 'absolute top-2 right-2 text-gray-500 hover:text-gray-700';
            closeButton.innerHTML = '<i class="fas fa-times"></i>';
            closeButton.addEventListener('click', function() {
                document.body.removeChild(emojiPopup);
            });
            emojiPopup.appendChild(closeButton);
            
            // Position popup
            const emojiButton = document.getElementById('emoji-button');
            const rect = emojiButton.getBoundingClientRect();
            emojiPopup.style.left = rect.left + 'px';
            emojiPopup.style.top = (rect.top - 220) + 'px'; // Position above the button
            
            // Add to body
            document.body.appendChild(emojiPopup);
            
            // Close when clicking outside
            document.addEventListener('click', function closeEmojiPopup(e) {
                if (!emojiPopup.contains(e.target) && e.target !== emojiButton) {
                    if (document.body.contains(emojiPopup)) {
                        document.body.removeChild(emojiPopup);
                    }
                    document.removeEventListener('click', closeEmojiPopup);
                }
            });
        }
        
        // Open format options
        function openFormatOptions() {
            const messageInput = document.getElementById('message-input');
            
            // Create format popup
            const formatPopup = document.createElement('div');
            formatPopup.className = 'bg-white rounded-lg shadow-lg p-3 absolute bottom-20 left-0 z-10 w-64';
            formatPopup.id = 'format-popup';
            
            // Format options
            formatPopup.innerHTML = `
                <div class="flex justify-between items-center mb-2 border-b pb-2">
                    <h3 class="font-medium">Text Formatting</h3>
                    <button id="close-format-popup" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="grid grid-cols-2 gap-2">
                    <button class="format-btn p-2 text-sm hover:bg-gray-100 rounded flex items-center" data-format="bold">
                        <i class="fas fa-bold mr-2"></i> Bold
                    </button>
                    <button class="format-btn p-2 text-sm hover:bg-gray-100 rounded flex items-center" data-format="italic">
                        <i class="fas fa-italic mr-2"></i> Italic
                    </button>
                    <button class="format-btn p-2 text-sm hover:bg-gray-100 rounded flex items-center" data-format="list">
                        <i class="fas fa-list-ul mr-2"></i> List
                    </button>
                    <button class="format-btn p-2 text-sm hover:bg-gray-100 rounded flex items-center" data-format="link">
                        <i class="fas fa-link mr-2"></i> Link
                    </button>
                </div>
            `;
            
            // Position popup
            const formatButton = document.getElementById('format-button');
            const rect = formatButton.getBoundingClientRect();
            formatPopup.style.left = rect.left + 'px';
            formatPopup.style.top = (rect.top - 180) + 'px'; // Position above the button
            
            // Add to body
            document.body.appendChild(formatPopup);
            
            // Add event listeners for formatting buttons
            document.querySelectorAll('.format-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const format = this.dataset.format;
                    const selection = getInputSelection(messageInput);
                    let formattedText = '';
                    
                    switch(format) {
                        case 'bold':
                            formattedText = `**${selection.text}**`;
                            break;
                        case 'italic':
                            formattedText = `_${selection.text}_`;
                            break;
                        case 'list':
                            if (selection.text) {
                                // Convert selection to list
                                const lines = selection.text.split('\n');
                                formattedText = lines.map(line => `• ${line}`).join('\n');
                            } else {
                                formattedText = '• ';
                            }
                            break;
                        case 'link':
                            if (selection.text) {
                                formattedText = `[${selection.text}](url)`;
                            } else {
                                formattedText = '[link text](url)';
                            }
                            break;
                    }
                    
                    // Replace selection with formatted text
                    insertTextAtCursor(messageInput, formattedText, selection.start, selection.end);
                    
                    // Close popup
                    document.body.removeChild(formatPopup);
                });
            });
            
            // Close button
            document.getElementById('close-format-popup').addEventListener('click', function() {
                document.body.removeChild(formatPopup);
            });
            
            // Close when clicking outside
            document.addEventListener('click', function closeFormatPopup(e) {
                if (!formatPopup.contains(e.target) && e.target !== formatButton) {
                    if (document.body.contains(formatPopup)) {
                        document.body.removeChild(formatPopup);
                    }
                    document.removeEventListener('click', closeFormatPopup);
                }
            });
        }
        
        // Helper function to get selection from input
        function getInputSelection(input) {
            return {
                start: input.selectionStart,
                end: input.selectionEnd,
                text: input.value.substring(input.selectionStart, input.selectionEnd)
            };
        }
        
        // Helper function to insert text at cursor position
        function insertTextAtCursor(input, text, selStart, selEnd) {
            const startPos = selStart !== undefined ? selStart : input.selectionStart;
            const endPos = selEnd !== undefined ? selEnd : input.selectionEnd;
            
            const textBefore = input.value.substring(0, startPos);
            const textAfter = input.value.substring(endPos);
            
            input.value = textBefore + text + textAfter;
            
            // Set cursor position after inserted text
            const newPos = startPos + text.length;
            input.selectionStart = newPos;
            input.selectionEnd = newPos;
            input.focus();
        }
    </script>

    <!-- Add DOMPurify for HTML sanitization -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.8/purify.min.js"></script>

    <!-- Letter Templates Modal -->
    <div id="letter-templates-modal" class="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50 hidden">
        <div class="bg-white rounded-lg shadow-xl w-11/12 max-w-5xl overflow-hidden h-5/6 flex flex-col">
            <div class="bg-blue-800 text-white px-4 py-3 flex justify-between items-center">
                <h3 class="font-medium">Email Letter Templates</h3>
                <button id="close-letter-modal" class="text-white hover:text-gray-200 focus:outline-none">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="flex flex-1 overflow-hidden">
                <!-- Templates List -->
                <div class="w-64 bg-gray-100 border-r border-gray-200 overflow-y-auto">
                    <div class="p-3 border-b border-gray-200">
                        <button id="new-template-btn" class="w-full bg-blue-600 hover:bg-blue-700 text-white rounded-lg px-3 py-2 flex items-center justify-center text-sm">
                            <i class="fas fa-plus mr-2"></i> New Template
                        </button>
                    </div>
                    <div id="templates-list" class="divide-y divide-gray-200">
                        <!-- Templates will be listed here -->
                    </div>
                </div>
                
                <!-- Editor Area -->
                <div class="flex-1 flex flex-col overflow-hidden">
                    <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                        <div class="flex-1">
                            <input type="text" id="template-name" placeholder="Template Name" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div class="ml-4 flex">
                            <button id="save-template-btn" class="bg-green-600 hover:bg-green-700 text-white rounded-lg px-4 py-2 mr-2">
                                <i class="fas fa-save mr-2"></i> Save
                            </button>
                            <button id="use-template-btn" class="bg-blue-600 hover:bg-blue-700 text-white rounded-lg px-4 py-2">
                                <i class="fas fa-paper-plane mr-2"></i> Use
                            </button>
                        </div>
                    </div>
                    
                    <!-- WYSIWYG Editor Toolbar -->
                    <div class="p-2 border-b border-gray-200 bg-gray-50">
                        <div class="flex flex-wrap gap-1">
                            <button data-command="bold" class="editor-btn px-2 py-1 rounded hover:bg-gray-200" title="Bold">
                                <i class="fas fa-bold"></i>
                            </button>
                            <button data-command="italic" class="editor-btn px-2 py-1 rounded hover:bg-gray-200" title="Italic">
                                <i class="fas fa-italic"></i>
                            </button>
                            <button data-command="underline" class="editor-btn px-2 py-1 rounded hover:bg-gray-200" title="Underline">
                                <i class="fas fa-underline"></i>
                            </button>
                            <span class="border-r border-gray-300 mx-1"></span>
                            <button data-command="justifyLeft" class="editor-btn px-2 py-1 rounded hover:bg-gray-200" title="Align Left">
                                <i class="fas fa-align-left"></i>
                            </button>
                            <button data-command="justifyCenter" class="editor-btn px-2 py-1 rounded hover:bg-gray-200" title="Align Center">
                                <i class="fas fa-align-center"></i>
                            </button>
                            <button data-command="justifyRight" class="editor-btn px-2 py-1 rounded hover:bg-gray-200" title="Align Right">
                                <i class="fas fa-align-right"></i>
                            </button>
                            <span class="border-r border-gray-300 mx-1"></span>
                            <button data-command="insertUnorderedList" class="editor-btn px-2 py-1 rounded hover:bg-gray-200" title="Bullet List">
                                <i class="fas fa-list-ul"></i>
                            </button>
                            <button data-command="insertOrderedList" class="editor-btn px-2 py-1 rounded hover:bg-gray-200" title="Numbered List">
                                <i class="fas fa-list-ol"></i>
                            </button>
                            <span class="border-r border-gray-300 mx-1"></span>
                            <button data-command="createLink" class="editor-btn px-2 py-1 rounded hover:bg-gray-200" title="Insert Link">
                                <i class="fas fa-link"></i>
                            </button>
                            <button data-command="insertImage" class="editor-btn px-2 py-1 rounded hover:bg-gray-200" title="Insert Image">
                                <i class="fas fa-image"></i>
                            </button>
                            <span class="border-r border-gray-300 mx-1"></span>
                            <select id="header-format" class="editor-btn px-2 py-1 rounded hover:bg-gray-200 border-none focus:ring-0 cursor-pointer">
                                <option value="">Paragraph</option>
                                <option value="h1">Heading 1</option>
                                <option value="h2">Heading 2</option>
                                <option value="h3">Heading 3</option>
                                <option value="h4">Heading 4</option>
                            </select>
                            <select id="font-color" class="editor-btn px-2 py-1 rounded hover:bg-gray-200 border-none focus:ring-0 cursor-pointer">
                                <option value="">Text Color</option>
                                <option value="#000000" style="background-color: #000000; color: white;">Black</option>
                                <option value="#0000FF" style="background-color: #0000FF; color: white;">Blue</option>
                                <option value="#FF0000" style="background-color: #FF0000; color: white;">Red</option>
                                <option value="#008000" style="background-color: #008000; color: white;">Green</option>
                                <option value="#FFA500" style="background-color: #FFA500;">Orange</option>
                                <option value="#800080" style="background-color: #800080; color: white;">Purple</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Editor Content Area -->
                    <div class="flex-1 p-4 overflow-y-auto">
                        <div id="editor-content" class="min-h-full border border-gray-300 rounded-lg p-4" contenteditable="true"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Confirmation Modal -->
    <div id="confirmation-modal" class="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50 hidden">
        <div class="bg-white rounded-lg shadow-xl w-96 overflow-hidden">
            <div class="bg-red-600 text-white px-4 py-3 flex justify-between items-center">
                <h3 class="font-medium" id="confirmation-title">Confirm Action</h3>
                <button id="close-confirmation-modal" class="text-white hover:text-gray-200 focus:outline-none">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-4">
                <div class="text-center my-4">
                    <div class="mx-auto bg-red-100 rounded-full h-16 w-16 flex items-center justify-center mb-6">
                        <i class="fas fa-exclamation-triangle text-red-600 text-2xl"></i>
                    </div>
                    <p id="confirmation-message" class="mb-4 text-gray-700"></p>
                    <p class="text-sm text-gray-500">This action cannot be undone.</p>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 flex justify-end">
                <button id="cancel-confirmation" class="text-gray-600 bg-white px-4 py-2 rounded-md border border-gray-300 mr-2 hover:bg-gray-50 transition duration-200">
                    Cancel
                </button>
                <button id="confirm-action" class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition duration-200">
                    Delete
                </button>
            </div>
        </div>
    </div>
    
    <!-- Status Modal -->
    <div id="status-modal" class="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50 hidden">
        <div class="bg-white rounded-lg shadow-xl w-96 overflow-hidden">
            <div class="bg-blue-600 text-white px-4 py-3 flex justify-between items-center">
                <h3 class="font-medium">Change Status</h3>
                <button id="close-status-modal" class="text-white hover:text-gray-200 focus:outline-none">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-4">
                <div class="grid grid-cols-3 gap-3 my-4">
                    <div class="status-option border rounded-md p-3 text-center cursor-pointer hover:bg-blue-50 transition-colors" data-status="new">
                        <div class="mx-auto bg-yellow-100 rounded-full h-12 w-12 flex items-center justify-center mb-2">
                            <i class="fas fa-envelope text-yellow-500"></i>
                        </div>
                        <div class="font-medium">New</div>
                    </div>
                    <div class="status-option border rounded-md p-3 text-center cursor-pointer hover:bg-blue-50 transition-colors" data-status="responded">
                        <div class="mx-auto bg-green-100 rounded-full h-12 w-12 flex items-center justify-center mb-2">
                            <i class="fas fa-reply text-green-500"></i>
                        </div>
                        <div class="font-medium">Responded</div>
                    </div>
                    <div class="status-option border rounded-md p-3 text-center cursor-pointer hover:bg-blue-50 transition-colors" data-status="archived">
                        <div class="mx-auto bg-gray-100 rounded-full h-12 w-12 flex items-center justify-center mb-2">
                            <i class="fas fa-archive text-gray-500"></i>
                        </div>
                        <div class="font-medium">Archived</div>
                    </div>
                </div>
                <p class="text-sm text-gray-500 mt-3">Changing status will help you organize conversations.</p>
            </div>
            <div class="bg-gray-50 px-4 py-3 flex justify-end">
                <button id="cancel-status-change" class="text-gray-600 bg-white px-4 py-2 rounded-md border border-gray-300 mr-2 hover:bg-gray-50 transition duration-200">
                    Cancel
                </button>
                <button id="apply-status-change" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition duration-200">
                    Apply
                </button>
            </div>
        </div>
    </div>

    <!-- Notification Sound -->
    <audio id="notification-sound" src="https://cdn.jsdelivr.net/gh/ferdium/ferdium-app@develop/recipes/messenger/notification.ogg" preload="auto"></audio>
</body>
</html>